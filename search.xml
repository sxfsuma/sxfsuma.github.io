<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>排序算法总结</title>
      <link href="/2019/12/23/algorithm/Sort/"/>
      <url>/2019/12/23/algorithm/Sort/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> Sort </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> Sort </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单例模式</title>
      <link href="/2019/12/23/gof23/Singleton/"/>
      <url>/2019/12/23/gof23/Singleton/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script>]]></content>
      
      
      <categories>
          
          <category> GOF23 </category>
          
          <category> Singleton </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GOF23 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>The Size Of A Java Object</title>
      <link href="/2019/12/19/blogs/java/The-Size-Of-Java-Object/"/>
      <url>/2019/12/19/blogs/java/The-Size-Of-Java-Object/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>​       之前 一直没有关注一个<code>Java</code> 对象会占用多少内存，最近在工作中遇到这样的场景，需要考虑对象在内存中占用多少内存，所以整理一下有关<code>Java</code> 对象的相关知识，java对象的结构，是如何在内存中存储的，以及占用多少内存等相关的知识点。</p><hr><h2 id="Java对象的结构"><a href="#Java对象的结构" class="headerlink" title="Java对象的结构"></a>Java对象的结构</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Object object = <span class="keyword">new</span> Object()</span><br></pre></td></tr></table></figure><p>首先来了解一下<code>java</code>实例对象的结构是什么样子的。</p><p>在<code>HotSpot</code>虚拟机中,对象在内存中存储的布局可以分为3块区域：对象头（Header），实例数据（Instance Data）和对象填充（Padding）。</p><p><img alt data-src="https://i.loli.net/2019/12/21/hszlDCTvAnP2BFK.png" class="lazyload"></p><ul><li><p><strong>对象头</strong>：Hotspot虚拟机的对象头主要包括两部分数据：Mark Word（标记字段）、Class Pointer（类型指针）。数组长度（如果有的话）</p></li><li><p><strong>实例数据</strong>：对象真正存储的有效信息，存放类的属性数据信息，包括父类的属性信息。</p></li><li><p><strong>对齐填充</strong>：由于虚拟机要求 对象起始地址必须是8字节的整数倍。填充数据不是必须存在的，仅仅是为了字节对齐。</p></li></ul><h3 id="对象头"><a href="#对象头" class="headerlink" title="对象头"></a>对象头</h3><p>  对象头主要包括两部分数据：Mark Word（标记字段）、Class Pointer（类型指针），数组长度（如果有的话）</p><p>  <img alt data-src="https://i.loli.net/2019/12/21/vH9ROSwaY62WAns.png" class="lazyload"></p><p>  <strong>Mark Word</strong> ：用于存储对象自身的运行时数据，它是实现轻量级锁和偏向锁的关键。</p><p>  <strong>Class Pointer</strong>：是对象指向它的类元数据的指针，虚拟机通过这个指针来确定这个对象是哪个类的实例</p><p>  <strong>数组长度</strong>：只有当本对象是一个数组对象时才会有这个部分</p><h4 id="Mark-Word"><a href="#Mark-Word" class="headerlink" title="Mark Word"></a>Mark Word</h4><p>Mark Word 用于存储对象自身的运行时数据，如哈希码（HashCode）、GC分代年龄、锁状态标志、线程持有的锁、偏向线程 ID、偏向时间戳等。</p><p>在32位的<code>HotSpot</code>虚拟机中，如果对象处于未被锁定的状态下，那么Mark Word的32bit空间里的25位用于存储对象哈希码，4bit用于存储对象分代年龄，2bit用于存储锁标志位，1bit固定为0，表示非偏向锁。其他状态如下图所示：</p><p><img alt data-src="https://i.loli.net/2019/12/23/PRTMbNB1LjgGpxF.png" class="lazyload"></p><blockquote><p>关于锁的部分之后会专门讲到，现在暂且不用关注着部分。</p></blockquote><p>在64位的JVM中，MarkWord 又是怎么样的分布呢？</p><p>在64位的JVM中，Mark Word区域占用8字节，也就是64位。<br><img alt data-src="https://i.loli.net/2019/12/24/RPlmfQAHJsU37ak.png" class="lazyload"></p><p>关于Mark Word的结构，定义在markOop.hpp文件：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">32</span> bits:</span><br><span class="line">--------</span><br><span class="line">hash:<span class="number">25</span> ------------&gt;| age:<span class="number">4</span>    biased_lock:<span class="number">1</span> lock:<span class="number">2</span> (normal object)</span><br><span class="line">JavaThread*:<span class="number">23</span> epoch:<span class="number">2</span> age:<span class="number">4</span>    biased_lock:<span class="number">1</span> lock:<span class="number">2</span> (biased object)</span><br><span class="line"><span class="built_in">size</span>:<span class="number">32</span> ------------------------------------------&gt;| (CMS <span class="built_in">free</span> block)</span><br><span class="line">PromotedObject*:<span class="number">29</span> ----------&gt;| promo_bits:<span class="number">3</span> -----&gt;| (CMS promoted object)</span><br><span class="line"> </span><br><span class="line"><span class="number">64</span> bits:</span><br><span class="line">--------</span><br><span class="line">unused:<span class="number">25</span> hash:<span class="number">31</span> --&gt;| unused:<span class="number">1</span>   age:<span class="number">4</span>    biased_lock:<span class="number">1</span> lock:<span class="number">2</span> (normal object)</span><br><span class="line">JavaThread*:<span class="number">54</span> epoch:<span class="number">2</span> unused:<span class="number">1</span>   age:<span class="number">4</span>    biased_lock:<span class="number">1</span> lock:<span class="number">2</span> (biased object)</span><br><span class="line">PromotedObject*:<span class="number">61</span> ---------------------&gt;| promo_bits:<span class="number">3</span> -----&gt;| (CMS promoted object)</span><br><span class="line"><span class="built_in">size</span>:<span class="number">64</span> -----------------------------------------------------&gt;| (CMS <span class="built_in">free</span> block)</span><br><span class="line"> </span><br><span class="line">unused:<span class="number">25</span> hash:<span class="number">31</span> --&gt;| cms_free:<span class="number">1</span> age:<span class="number">4</span>    biased_lock:<span class="number">1</span> lock:<span class="number">2</span> (COOPs &amp;&amp; normal object)</span><br><span class="line">JavaThread*:<span class="number">54</span> epoch:<span class="number">2</span> cms_free:<span class="number">1</span> age:<span class="number">4</span>    biased_lock:<span class="number">1</span> lock:<span class="number">2</span> (COOPs &amp;&amp; biased object)</span><br><span class="line">narrowOop:<span class="number">32</span> unused:<span class="number">24</span> cms_free:<span class="number">1</span> unused:<span class="number">4</span> promo_bits:<span class="number">3</span> -----&gt;| (COOPs &amp;&amp; CMS promoted object)</span><br><span class="line">unused:<span class="number">21</span> <span class="built_in">size</span>:<span class="number">35</span> --&gt;| cms_free:<span class="number">1</span> unused:<span class="number">7</span> ------------------&gt;| (COOPs &amp;&amp; CMS <span class="built_in">free</span> block)</span><br><span class="line">[ptr             | <span class="number">00</span>]  locked             ptr points to real header on <span class="built_in">stack</span></span><br><span class="line">[header      | <span class="number">0</span> | <span class="number">01</span>]  unlocked           regular object header</span><br><span class="line">[ptr             | <span class="number">10</span>]  <span class="function">monitor            inflated <span class="title">lock</span> <span class="params">(header is wapped out)</span></span></span><br><span class="line">[ptr             | 11]  marked             used by markSweep to mark an object</span><br></pre></td></tr></table></figure><ul><li><p><code>biased_lock</code>：对象是否启用偏向锁标记，只占1个二进制位。为1时表示对象启用偏向锁，为0时表示对象没有偏向锁。lock和biased_lock共同表示对象处于什么锁状态。</p></li><li><p><code>age</code>：4位的Java对象年龄。在GC中，如果对象在Survivor区复制一次，年龄增加1。当对象达到设定的阈值时，将会晋升到老年代。默认情况下，并行GC的年龄阈值为15，并发GC的年龄阈值为6。由于age只有4位，所以最大值为15，这就是<code>-XX:MaxTenuringThreshold</code>选项最大值为15的原因。</p></li><li><p><code>identity_hashcode</code>：31位的对象标识<code>hashCode</code>，采用延迟加载技术。调用方法<code>System.identityHashCode()</code>计算，并会将结果写到该对象头中。当对象加锁后（偏向、轻量级、重量级），<code>MarkWord</code>的字节没有足够的空间保存<code>hashCode</code>，因此该值会移动到管程<code>Monitor</code>中。</p></li><li><p><code>thread_id</code>：持有偏向锁的线程ID。</p></li><li><p><code>epoch</code>：偏向锁的时间戳。</p></li><li><p><code>ptr_to_lock_record</code>：轻量级锁状态下，指向栈中锁记录的指针。</p></li><li><p><code>ptr_to_heavyweight_monitor</code>：重量级锁状态下，指向对象监视器Monitor的指针。</p></li></ul><h4 id="Class-Pointer"><a href="#Class-Pointer" class="headerlink" title="Class Pointer"></a>Class Pointer</h4><p>这一部分用于存储对象的类型指针，该指针指向它的类元数据，JVM通过这个指针确定对象是哪个类的实例。该指针的位长度为JVM的一个字大小，即32位的JVM为32位，64位的JVM为64位。</p><p>如果应用的对象过多，使用64位的指针将浪费大量内存，统计而言，64位的JVM将会比32位的JVM多耗费50%的内存。为了节约内存可以使用选项<code>+UseCompressedOops</code>开启指针压缩，其中，oop即<code>ordinary object pointer</code>普通对象指针。开启该选项后，下列指针将压缩至32位：</p><ol><li>每个Class的属性指针（即静态变量）</li><li>每个对象的属性指针（即对象变量）</li><li>普通对象数组的每个元素指针</li></ol><p>当然，也不是所有的指针都会压缩，一些特殊类型的指针JVM不会优化，比如指向<code>PermGen</code>的Class对象指针(JDK8中指向元空间的Class对象指针)、本地变量、堆栈元素、入参、返回值和NULL指针等。</p><h4 id="数组长度"><a href="#数组长度" class="headerlink" title="数组长度"></a>数组长度</h4><p>如果对象是一个数组，那么对象头还需要有额外的空间用于存储数组的长度，这部分数据的长度也随着JVM架构的不同而不同：32位的JVM上，长度为32位；64位JVM则为64位。64位JVM如果开启<code>+UseCompressedOops</code>选项，该区域长度也将由64位压缩至32位。</p><p>根据以上描述，总结如下：</p><table><thead><tr><th>类型</th><th>32位JVM</th><th>64位JVM</th></tr></thead><tbody><tr><td>markword</td><td>32bit</td><td>64bit</td></tr><tr><td>类型指针</td><td>32bit</td><td>64bit ，开启指针压缩时为32bit</td></tr><tr><td>数组长度</td><td>32bit</td><td>64bit ，开启指针压缩时为32bit</td></tr></tbody></table>  <a id="more"></a><p><img alt="to be continued.png" data-src="https://i.loli.net/2019/12/19/GI4VxycizW9pH7B.png" class="lazyload"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Object </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一篇博客</title>
      <link href="/2019/12/18/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
      <url>/2019/12/18/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>今天是公元 <code>2019-12-18</code>日，星期三，天气晴。使用<code>hexo</code> + <code>github</code>重新搭建了一个静态博客系统，之前也有搭建过，由于图床的原因，之前写的博客有很多图片都看不到了，恰好也想重新换一个主题，就再重新整理一下了。搭建这个博客的目的是为了督促自己的学习，多写技术博客，同时也会在博客上记录一些生活上和工作上的事情。</p>]]></content>
      
      
      <categories>
          
          <category> Demo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Demo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
