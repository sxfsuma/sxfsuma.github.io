<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>对象进入老年代情况浅析</title>
      <link href="2021/01/17/java/jvm/%E5%AF%B9%E8%B1%A1%E8%80%81%E5%B9%B4%E4%BB%A3%E6%83%85%E5%86%B5%E6%B5%85%E6%9E%90/"/>
      <url>2021/01/17/java/jvm/%E5%AF%B9%E8%B1%A1%E8%80%81%E5%B9%B4%E4%BB%A3%E6%83%85%E5%86%B5%E6%B5%85%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>最近在做项目性能优化的时候，其中有一点是需要优化老年代GC的情况，一是需要尽量避免老年代的增长，尽可能不发生Full GC或者是极大延长Full GC的时间间隔，二是降低Full GC期间的STW时间，需要考分析引起老年代增长的具体原因，本文整理一下对象进入老年代的几种情况，方便之后回顾。</p><p>对象进入老年代的情况主要分为以下四种：</p><ul><li>1、长期存活的对象进入老年代。</li><li>2、大对象进入老年代。</li><li>3、空间分配担保机制。</li><li>4、动态年龄判定。</li></ul><p>下面来逐个简单总结一下。</p><h3 id="长期存活对象进入老年代。"><a href="#长期存活对象进入老年代。" class="headerlink" title="长期存活对象进入老年代。"></a>长期存活对象进入老年代。</h3><p>年轻代的对象每“熬过”一次Young  GC，对象的年龄计数器就会加1，当年龄达到进入老年代的年龄阈值的时候就可以进入老年代。</p><p>进入老年代的年龄阈值可以通过 <code>-XX:MaxTenuringThreshold </code>参数值来设置。对于这个参数，大家第一反应可能就是默认值是15，但是有以下几点需要注意：</p><p>1、进入老年代年龄阈值最大值是15，也就是<code>MaxTenuringThreshold</code>最大值为15。</p><p>2、默认值不总是15，比如在<code>CMS</code>垃圾回收器下默认是就是6，而不是15。</p><p>3、实际的阈值不是固定不变的，是动态变化的。 （这个在动态年龄判定中会详细说到）</p><p>下面解释一下第一点和第二点，关于第三点会在动态年龄判定中进行详细描述。</p><p>1、首先解释一下最大值只能到15的原因，如果了解对象的结构的话就会知道对象的分代年龄存储在对象的对象头的Mark Word 中，不管是在32位的JVM中还是64位的<code>JVM</code>中，年龄计数器都占比4个bit，意味着年龄计数器的最大值只能计到15（1111）。这也是为什么进入老年代的年龄阈值最大值为15的原因。</p><p>下面表示的是32位的JVM下对象头的Mark Word的结构:</p><table borderCollapse="collapse" border="1" solid=#555555>  <tr align="center">     <th colspan="6" bgcolor=#D2691E>Mark Word (32bit)</th>  </tr>  <tr align="center">    <th rowspan="2" border="1" bgcolor=#E6E6FA>锁状态</th>    <th colspan="2" bgcolor=#E6E6FA>25bit</th>    <th rowspan="2" bgcolor=#E6E6FA>4bit</th>    <th bgcolor=#E6E6FA>1bit</th>    <th bgcolor=#E6E6FA>2bit</th>  </tr>  <tr align="center">    <td bgcolor=#E6E6FA>23bit</td>    <td bgcolor=#E6E6FA>2bit</td>    <td bgcolor=#E6E6FA>是否偏向锁</td>    <td bgcolor=#E6E6FA>锁标志位</td>  </tr>  <tr align="center">    <td>无锁状态</td>    <td colspan="2">对象的hash code</td>    <td>分代年龄</td>      <td>0</td>      <td>01</td>  </tr>  <tr align="center">    <td>轻量级锁</td>    <td  colspan="4">指向栈中锁记录的指针</td>    <td>00</td>  </tr>    <tr align="center">    <td>重量级锁</td>    <td  colspan="4">指向互斥量(重量级锁)的指针</td>    <td>10</td>  </tr>    <tr align="center">    <td>GC标志</td>    <td  colspan="4">unused</td>    <td>11</td>  </tr>    <tr align="center">    <td>偏向锁</td>    <td>线程ID</td>    <td>epoch</td>    <td>分代年龄</td>    <td>1</td>    <td>01</td>  </tr></table><p>64位JVM下对象头的Mark Word的结构:</p><table borderCollapse="collapse" border="1" solid=#555555>  <tr align="center">     <th colspan="10" bgcolor=#D2691E>Mark Word (64bit)</th>  </tr>  <tr align="center">    <th rowspan="2" border="1" bgcolor=#E6E6FA>锁状态</th>    <th colspan="2" bgcolor=#E6E6FA>25bit</th>    <th colspan="3" bgcolor=#E6E6FA>31bit</th>    <th bgcolor=#E6E6FA rowspan="2">1bit</th>    <th bgcolor=#E6E6FA rowspan="2">4bit</th>    <th bgcolor=#E6E6FA>1bit</th>    <th bgcolor=#E6E6FA>2bit</th>  </tr>  <tr align="center">    <td colspan="4" bgcolor=#E6E6FA>54bit</td>    <td bgcolor=#E6E6FA>2bit</td>    <td bgcolor=#E6E6FA>是否偏向锁</td>    <td bgcolor=#E6E6FA>锁标志位</td>  </tr>  <tr align="center">    <td>无锁状态</td>    <td colspan="2">unused</td>    <td colspan="3">对象的hash code</td>    <td>unused</td>    <td>分代年龄</td>    <td>0</td>    <td>01</td>  </tr>  <tr align="center">    <td>轻量级锁</td>    <td  colspan="8">指向栈中锁记录的指针</td>    <td>00</td>  </tr>    <tr align="center">    <td>重量级锁</td>    <td  colspan="8">指向互斥量(重量级锁)的指针</td>    <td>10</td>  </tr>    <tr align="center">    <td>GC标志</td>    <td  colspan="8">unused</td>    <td>11</td>  </tr>    <tr align="center">    <td>偏向锁</td>    <td colspan="4" >线程ID</td>    <td>epoch</td>    <td>unused</td>    <td>分代年龄</td>    <td>1</td>    <td>01</td>  </tr></table><p>2、默认值不总是15，在PS 垃圾收集器中的默认值是15，而在<code>CMS</code>垃圾回收器中是6，参考官方文档中：</p><blockquote><p><code>-XX:MaxTenuringThreshold</code>=<em>threshold</em>Sets the maximum tenuring threshold for use in adaptive GC sizing. <strong>The largest value is 15</strong>. <strong>The default value is 15 for the parallel (throughput) collector,</strong> and <strong>6 for the CMS collector.</strong></p></blockquote><p>可以写个简单的代码，查看一下<code>MaxTenuringThreshold</code>的值，查看方式可以使用如下方式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> jinfo -flag MaxTenuringThreshold <span class="variable">$&#123;pid&#125;</span> <span class="comment"># pid为java进程id</span></span></span><br></pre></td></tr></table></figure><p><strong>这里需要注意，<code>CMS</code>的默认值是6，在一些情况下会导致这个阈值不再是6。</strong></p><p>1、显示设置<code>MaxTenuringThreshold</code> 肯定算啦。</p><p>2、还有一种情况就是显示设置<code>SurvivorRatio</code>的值之后，那么最大晋升年龄就会变成15。</p><p>感兴趣的同学可以自己写个简单的demo测试一下，指定使用<code>CMS</code>垃圾收集器。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-XX:+UseConcMarkSweepGC </span><br><span class="line">-XX:SurvivorRatio=8  # 设置这个值和不设置这个值分别进行测试</span><br><span class="line">-XX:+PrintGCDetails </span><br><span class="line">-XX:+PrintTenuringDistribution</span><br></pre></td></tr></table></figure><p>并且可以在GC 日志中查看到：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[GC (Allocation Failure) [ParNew</span><br><span class="line">Desired survivor size 2621440 bytes, new threshold 1 (max 15) &#x2F;&#x2F; &lt;-- 看这，出现了new threshold 1 (max 15)</span><br><span class="line">- age   1:    4907592 bytes,    4907592 total</span><br><span class="line">: 28288K-&gt;4818K(35840K), 0.0038409 secs] 28288K-&gt;4818K(46080K), 0.0051496 secs] [Times: user&#x3D;0.00 sys&#x3D;0.00, real&#x3D;0.01 secs] </span><br></pre></td></tr></table></figure><p>可以在<code>openjdk</code>的源码中得到验证。在<code>arguments.cpp</code>中找到了<code>CMS</code>和<code>ParNew</code>设置参数的函数：<code>Arguments::set_cms_and_parnew_gc_flags()</code>，在函数中可以看到：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Now make adjustments for CMS</span></span><br><span class="line">intx   tenuring_default = (intx)<span class="number">6</span>;</span><br><span class="line"><span class="keyword">size_t</span> young_gen_per_worker = CMSYoungGenPerWorker;</span><br></pre></td></tr></table></figure><p>可以明确的看到，默认值就是6，但是再往下翻就可以看到：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Unless explicitly requested otherwise, definitely</span></span><br><span class="line"><span class="comment">// promote all objects surviving &quot;tenuring_default&quot; scavenges.</span></span><br><span class="line"><span class="keyword">if</span> (FLAG_IS_DEFAULT(MaxTenuringThreshold) &amp;&amp;</span><br><span class="line">FLAG_IS_DEFAULT(SurvivorRatio)) &#123;</span><br><span class="line">FLAG_SET_ERGO(uintx, MaxTenuringThreshold, tenuring_default);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>官方文档中说的<code>CMS </code>垃圾收集器的<code>MaxTenuringThreshold</code>为6，是在不手动设置参数<code>MaxTenuringThreshold</code> 和 <code>SurvivorRatio</code>的情况下默认是6，但是显式的设置了这两者中的任意一者，那么最大晋升年龄就会变成你手动设置的值或者是15。</p><hr><h3 id="大对象直接进入老年代。"><a href="#大对象直接进入老年代。" class="headerlink" title="大对象直接进入老年代。"></a>大对象直接进入老年代。</h3><p>大对象是指需要大量连续内存空间的对象，《深入理解Java虚拟机》中提到大对象主要指字符串和数组，虚拟机提供了一个<code>-XX:PretenureSizeThreshold</code>参数，大于这个值的参数直接在老年代分配。这样做的目的是避免在Eden区和两个Survivor区之间发生大量的内存复制（新生代采用的是复制算法）。</p><p>这里有两个点想说：</p><p>1、<code>PretenureSizeThreshold</code>默认值是0，也就是说如果不进行设置，任何对象都会优先在Eden区进行分配。</p><p>2、只有<code>Serial</code>和<code>ParNew</code>这两个年轻代的垃圾回收器支持<code>PretenureSizeThreshold</code>这个参数。<code>Parallel Scavenge</code>垃圾回收器是不认识这个参数的，这并不代表中在<code>Parallel Scavenge</code>中不存在大对象直接进入老年代的情况，只是换了一种实现方式而已。</p><p>接下来举个简单的例子，写个简单的测试代码来进行验证。</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/sxfsuma/cloudImg//data/img/%E4%B8%BE%E4%B8%AA%E6%A0%97%E5%AD%90.jpg" alt="举个栗子"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BigObjectToOldGenTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> _1M = <span class="number">1024</span> * <span class="number">1024</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] a1 = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">2</span> * _1M];</span><br><span class="line">        <span class="keyword">byte</span>[] a2 = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">2</span> * _1M];</span><br><span class="line">        <span class="keyword">byte</span>[] a3 = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">2</span> * _1M];</span><br><span class="line">        <span class="keyword">byte</span>[] a4 = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">4</span> * _1M];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>如果没有特殊说明，以下测试都在上诉代码下进行，设置不同的启动参数。</em></p><h4 id="Parallel-Scavenge"><a href="#Parallel-Scavenge" class="headerlink" title="Parallel Scavenge"></a><code>Parallel Scavenge</code></h4><p>在<code>JDK1.8</code>下使用默认的PS 垃圾收集器不设置<code>PretenureSizeThreshold</code>，设置<code>VM</code>参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">年轻代和老年代各占10M，年轻代中eden,from,to比例为8:1:1</span></span><br><span class="line">-Xms20M </span><br><span class="line">-Xmx20M </span><br><span class="line">-Xmn10M </span><br><span class="line">-XX:SurvivorRatio=8 </span><br><span class="line">-XX:+PrintGCDetails</span><br></pre></td></tr></table></figure><p>查看运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[GC (Allocation Failure) [PSYoungGen: 6348K-&gt;767K(9216K)] 6348K-&gt;4863K(19456K), 0.0044074 secs] [Times: user&#x3D;0.00 sys&#x3D;0.00, real&#x3D;0.00 secs] </span><br><span class="line">Heap</span><br><span class="line"> PSYoungGen      total 9216K, used 7316K [0x00000000ff600000, 0x0000000100000000, 0x0000000100000000)</span><br><span class="line">  eden space 8192K, 79% used [0x00000000ff600000,0x00000000ffc656e0,0x00000000ffe00000)</span><br><span class="line">  from space 1024K, 74% used [0x00000000ffe00000,0x00000000ffebfcb0,0x00000000fff00000)</span><br><span class="line">  to   space 1024K, 0% used [0x00000000fff00000,0x00000000fff00000,0x0000000100000000)</span><br><span class="line"> ParOldGen       total 10240K, used 4096K [0x00000000fec00000, 0x00000000ff600000, 0x00000000ff600000)</span><br><span class="line">  object space 10240K, 40% used [0x00000000fec00000,0x00000000ff000020,0x00000000ff600000)</span><br><span class="line"> Metaspace       used 3072K, capacity 4556K, committed 4864K, reserved 1056768K</span><br><span class="line">  class space    used 324K, capacity 392K, committed 512K, reserved 1048576K</span><br></pre></td></tr></table></figure><p>可以看到最终老年代被占用了40%，就好像是a4对象直接在老年代进行了分配。并且在这之前进行了一次Young GC。</p><p>跟踪了一下<code>Parallel Scavenge</code>的具体实现，发现在<code>parallelScavengeHeap.cpp</code>的<code>ParallelScavengeHeap::mem_allocate</code>方法（<code>ParallelScavenge</code>的内存分配方法）中如果对象一开始在年轻代分配失败了，首先会对一些情况做判断，满足条件的就会分配在老年代，实现代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// If certain conditions hold, try allocating from the old gen.</span></span><br><span class="line">result = mem_allocate_old_gen(size);</span><br><span class="line"><span class="keyword">if</span> (result != <span class="literal">NULL</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看看<code>mem_allocate_old_gen</code>方法的实现：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">HeapWord* <span class="title">ParallelScavengeHeap::mem_allocate_old_gen</span><span class="params">(<span class="keyword">size_t</span> size)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!should_alloc_in_eden(size) || GC_locker::is_active_and_needs_gc()) &#123;</span><br><span class="line">    <span class="comment">// Size is too big for eden, or gc is locked out.</span></span><br><span class="line">    <span class="keyword">return</span> old_gen()-&gt;allocate(size);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// If a &quot;death march&quot; is in progress, allocate from the old gen a limited</span></span><br><span class="line">  <span class="comment">// number of times before doing a GC.</span></span><br><span class="line">  <span class="keyword">if</span> (_death_march_count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (_death_march_count &lt; <span class="number">64</span>) &#123;</span><br><span class="line">      ++_death_march_count;</span><br><span class="line">      <span class="keyword">return</span> old_gen()-&gt;allocate(size);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      _death_march_count = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中的<code>should_alloc_in_eden</code>方法就是判断是不是应该分配在Eden的方法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">ParallelScavengeHeap::should_alloc_in_eden</span><span class="params">(<span class="keyword">const</span> <span class="keyword">size_t</span> size)</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">size_t</span> eden_size = young_gen()-&gt;eden_space()-&gt;capacity_in_words();</span><br><span class="line"><span class="keyword">return</span> size &lt; eden_size / <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经过上面的代码，可以知道，<code>Parallel Scavenge</code>在进行对象分配时，<strong>如果对象的大小 &gt;= Eden区的一半，并不会经过空间分配担保机制，会直接将对象放入老年代中</strong>，这也就解释了上面GC日志的内容：<code>a1，a2，a3</code>，还在年轻代中，<code>a4</code>对象被直接分配到了老年代中。</p><p>其实也可以在逻辑上认为在PS垃圾回收器中的<code>PretenureSizeThreshold</code>的大小为eden区的一半大小，超过这个大小，就会在直接在老年代中进分配。</p><p>那如果将<code>a4</code>的大小设置成小于4M呢：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BigObjectPSTest</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> _1M = <span class="number">1024</span> * <span class="number">1024</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">byte</span>[] a1,a2,a3,a4;</span><br><span class="line">a1 = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">2</span>*_1M];</span><br><span class="line">a2 = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">2</span>*_1M];</span><br><span class="line">a3 = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">2</span>*_1M];</span><br><span class="line"><span class="comment">// a4修改为3M</span></span><br><span class="line">a4 = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">3</span>*_1M];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[PSYoungGen: 8144K-&gt;744K(9216K)] 8144K-&gt;6896K(19456K), 0.0041046 secs] [Times: user&#x3D;0.00 sys&#x3D;0.00, real&#x3D;0.00 secs] </span><br><span class="line">[Full GC (Ergonomics) [PSYoungGen: 744K-&gt;0K(9216K)] [ParOldGen: 6152K-&gt;6747K(10240K)] 6896K-&gt;6747K(19456K), [Metaspace: 3227K-&gt;3227K(1056768K)], 0.0057705 secs] [Times: user&#x3D;0.00 sys&#x3D;0.00, real&#x3D;0.01 secs] </span><br><span class="line">Heap</span><br><span class="line"> PSYoungGen      total 9216K, used 3237K [0x00000000ff600000, 0x0000000100000000, 0x0000000100000000)</span><br><span class="line">  eden space 8192K, 39% used [0x00000000ff600000,0x00000000ff9297c8,0x00000000ffe00000)</span><br><span class="line">  from space 1024K, 0% used [0x00000000ffe00000,0x00000000ffe00000,0x00000000fff00000)</span><br><span class="line">  to   space 1024K, 0% used [0x00000000fff00000,0x00000000fff00000,0x0000000100000000)</span><br><span class="line"> ParOldGen       total 10240K, used 6747K [0x00000000fec00000, 0x00000000ff600000, 0x00000000ff600000)</span><br><span class="line">  object space 10240K, 65% used [0x00000000fec00000,0x00000000ff296c40,0x00000000ff600000)</span><br><span class="line"> Metaspace       used 3235K, capacity 4496K, committed 4864K, reserved 1056768K</span><br><span class="line">  class space    used 350K, capacity 388K, committed 512K, reserved 1048576K</span><br></pre></td></tr></table></figure><p>可以看到，<code>a4</code>对象设置为3M之后，小于了Eden区的一半，此时就触发了<strong>空间分配担保</strong>机制，将原有的<code>a1, a2, a3</code>对象移动到了老年代，此时Eden区就清空了，可以容纳下<code>a4</code>对象。</p><p><strong>但是此时有新一个新的问题需要注意，除了Young GC之外，触发了一次Full GC，在后面进行分析。</strong></p><h4 id="Serial"><a href="#Serial" class="headerlink" title="Serial"></a><code>Serial</code></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-XX:+UseSerialGC </span><br><span class="line">-Xms20M </span><br><span class="line">-Xmx20M </span><br><span class="line">-Xmn10M </span><br><span class="line">-XX:SurvivorRatio=8 </span><br><span class="line">-XX:+PrintGCDetails</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[GC (Allocation Failure) [DefNew: 8145K-&gt;628K(9216K), 0.0048082 secs] 8145K-&gt;6772K(19456K), 0.0048630 secs] [Times: user&#x3D;0.02 sys&#x3D;0.00, real&#x3D;0.01 secs] </span><br><span class="line">Heap</span><br><span class="line"> def new generation   total 9216K, used 4806K [0x00000000fec00000, 0x00000000ff600000, 0x00000000ff600000)</span><br><span class="line">  eden space 8192K,  51% used [0x00000000fec00000, 0x00000000ff014930, 0x00000000ff400000)</span><br><span class="line">  from space 1024K,  61% used [0x00000000ff500000, 0x00000000ff59d0c0, 0x00000000ff600000)</span><br><span class="line">  to   space 1024K,   0% used [0x00000000ff400000, 0x00000000ff400000, 0x00000000ff500000)</span><br><span class="line"> tenured generation   total 10240K, used 6144K [0x00000000ff600000, 0x0000000100000000, 0x0000000100000000)</span><br><span class="line">   the space 10240K,  60% used [0x00000000ff600000, 0x00000000ffc00030, 0x00000000ffc00200, 0x0000000100000000)</span><br><span class="line"> Metaspace       used 3235K, capacity 4496K, committed 4864K, reserved 1056768K</span><br><span class="line">  class space    used 350K, capacity 388K, committed 512K, reserved 1048576K</span><br></pre></td></tr></table></figure><p>在分配a4时发现Eden内存不足发生了一次<code>Young GC</code>，但是a1，a2，a3都是存活对象，而且a1+a2+a3 = 6M &gt;Survivor（1M），此时就会触发<strong>分配担保</strong>机制将a1，a2，a3提前转移到老年代中，a4还是被分配到了Eden区。</p><p>设置<code>-XX:PretenureSizeThreshold=3145728</code>（3M）</p><p>设置启动参数如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-XX:+UseSerialGC </span><br><span class="line">-Xms20M </span><br><span class="line">-Xmx20M </span><br><span class="line">-Xmn10M </span><br><span class="line">-XX:SurvivorRatio&#x3D;8 </span><br><span class="line">-XX:+PrintGCDetails </span><br><span class="line">-XX:PretenureSizeThreshold&#x3D;3145728</span><br></pre></td></tr></table></figure><p>查看输出日志：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Heap</span><br><span class="line"> def new generation   total 9216K, used 8192K [0x00000000fec00000, 0x00000000ff600000, 0x00000000ff600000)</span><br><span class="line">  eden space 8192K, 100% used [0x00000000fec00000, 0x00000000ff400000, 0x00000000ff400000)</span><br><span class="line">  from space 1024K,   0% used [0x00000000ff400000, 0x00000000ff400000, 0x00000000ff500000)</span><br><span class="line">  to   space 1024K,   0% used [0x00000000ff500000, 0x00000000ff500000, 0x00000000ff600000)</span><br><span class="line"> tenured generation   total 10240K, used 4096K [0x00000000ff600000, 0x0000000100000000, 0x0000000100000000)</span><br><span class="line">   the space 10240K,  40% used [0x00000000ff600000, 0x00000000ffa00010, 0x00000000ffa00200, 0x0000000100000000)</span><br><span class="line"> Metaspace       used 3234K, capacity 4496K, committed 4864K, reserved 1056768K</span><br><span class="line">  class space    used 350K, capacity 388K, committed 512K, reserved 1048576K</span><br></pre></td></tr></table></figure><p>此时a4直接在老年代中进行了分配，并未触发Young GC。</p><h4 id="ParNew"><a href="#ParNew" class="headerlink" title="ParNew"></a><code>ParNew</code></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-XX:+UseParNewGC -Xms20M -Xmx20M -Xmn10M -XX:SurvivorRatio&#x3D;8 -XX:+PrintGCDetails</span><br></pre></td></tr></table></figure><p>不设置阈值时，输出日志如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[GC (Allocation Failure) [ParNew: 7813K-&gt;615K(9216K), 0.0048937 secs] 7813K-&gt;6759K(19456K), 0.0049503 secs] [Times: user&#x3D;0.00 sys&#x3D;0.00, real&#x3D;0.01 secs] </span><br><span class="line">Heap</span><br><span class="line"> par new generation   total 9216K, used 4876K [0x00000000fec00000, 0x00000000ff600000, 0x00000000ff600000)</span><br><span class="line">  eden space 8192K,  52% used [0x00000000fec00000, 0x00000000ff029150, 0x00000000ff400000)</span><br><span class="line">  from space 1024K,  60% used [0x00000000ff500000, 0x00000000ff599ec0, 0x00000000ff600000)</span><br><span class="line">  to   space 1024K,   0% used [0x00000000ff400000, 0x00000000ff400000, 0x00000000ff500000)</span><br><span class="line"> tenured generation   total 10240K, used 6144K [0x00000000ff600000, 0x0000000100000000, 0x0000000100000000)</span><br><span class="line">   the space 10240K,  60% used [0x00000000ff600000, 0x00000000ffc00030, 0x00000000ffc00200, 0x0000000100000000)</span><br><span class="line"> Metaspace       used 3104K, capacity 4496K, committed 4864K, reserved 1056768K</span><br><span class="line">  class space    used 336K, capacity 388K, committed 512K, reserved 1048576K</span><br><span class="line">  </span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM warning: Using the ParNew young collector with the Serial old collector is deprecated and will likely be removed in a future release</span><br></pre></td></tr></table></figure><p>设置阈值为3M</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-XX:+UseParNewGC -Xms20M -Xmx20M -Xmn10M -XX:SurvivorRatio&#x3D;8 -XX:+PrintGCDetails -XX:PretenureSizeThreshold&#x3D;3145728</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Heap</span><br><span class="line"> par new generation   total 9216K, used 8192K [0x00000000fec00000, 0x00000000ff600000, 0x00000000ff600000)</span><br><span class="line">  eden space 8192K, 100% used [0x00000000fec00000, 0x00000000ff400000, 0x00000000ff400000)</span><br><span class="line">  from space 1024K,   0% used [0x00000000ff400000, 0x00000000ff400000, 0x00000000ff500000)</span><br><span class="line">  to   space 1024K,   0% used [0x00000000ff500000, 0x00000000ff500000, 0x00000000ff600000)</span><br><span class="line"> tenured generation   total 10240K, used 4096K [0x00000000ff600000, 0x0000000100000000, 0x0000000100000000)</span><br><span class="line">   the space 10240K,  40% used [0x00000000ff600000, 0x00000000ffa00010, 0x00000000ffa00200, 0x0000000100000000)</span><br><span class="line"> Metaspace       used 3234K, capacity 4496K, committed 4864K, reserved 1056768K</span><br><span class="line">  class space    used 350K, capacity 388K, committed 512K, reserved 1048576K</span><br><span class="line">  </span><br><span class="line">    </span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM warning: Using the ParNew young collector with the Serial old collector is deprecated and will likely be removed in a future release</span><br></pre></td></tr></table></figure><p>可以看到除了多一个提示之外，其他表现与<code>Serial</code>一致，不在赘述。</p><hr><h3 id="空间分配担保"><a href="#空间分配担保" class="headerlink" title="空间分配担保"></a>空间分配担保</h3><blockquote><p> 在发生Minor GC之前，虚拟机会先检查老年代中<strong>最大的可用的连续空间是否大于新生代中所有对象总空间</strong>，如果这个条件成立，那么Minor GC可以确保是安全的，如果不成立，则虚拟机会查看<code>HandlePromotionFaiure</code>设置值是否允许担保失败。如果允许（值为true），那么会继续检查老年代最大可用的连续空间是否大于历次晋升到老年代对象的平均大小，如果<strong>大于</strong>，将尝试进行一次Minor GC，尽管这次GC是有风险的；如果<strong>小于</strong>，或者<code>HandlePromotionFaiure</code>设置不允许冒险（值为false），那么这时就要改为进行一次Full GC。 </p></blockquote><blockquote><p>所谓冒险：也就是说当用来轮转的to区无法承受新生代中所存活的对象内存时，需要老年代进行分配担保，（也就是说，在新生代中进行垃圾回收时候，需要将 Eden区域和from区域中存活的对象拷贝到to区域中去，但是如果to区域的大小不足以放下这些存活的对象，那么就需要将这些对象放入到老年代中去，需要老年代中有足够的空间）把to无法容纳的对象直接进入老年代中，前提是老年代中有足够的空间。</p></blockquote><p><strong>在JDK1.6 Update 24之后，<code>HandlePromotionFaiure</code>参数不会再影响到虚拟机的空间分配担保策略，规则修改为：只要老年代的连续空间大于（新生代对象总大小或者历次晋升的平均大小），进行Minor GC，否则进行Full GC。</strong></p><p>在大对象进入老年代的实验中，其实已经看到空间分配担保的作用，不再单独做实验验证。</p><p>但是在上面遗留了一个问题，就是在使用 <code>Parallel Scavenge</code> 垃圾收集器时，当a4对象设置为3M时，小于Eden区的一半，触发空间分配担保机制，将a1, a2, a3对象移到到老年代中，在Eden区进行a4的分配，此时的Eden区是足够的，为什么紧接着还发生了一次Full GC呢？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[Full GC (Ergonomics) [PSYoungGen: 744K-&gt;0K(9216K)] [ParOldGen: 6152K-&gt;6747K(10240K)] 6896K-&gt;6747K(19456K), [Metaspace: 3227K-&gt;3227K(1056768K)], 0.0057705 secs] [Times: user&#x3D;0.00 sys&#x3D;0.00, real&#x3D;0.01 secs] </span><br></pre></td></tr></table></figure><p>为什么会出现这样的情况呢？</p><p>首先需要明确一点，造成GC的原因有很多种。不单单只有空间分配失败（Allocation Failure）,可以在<code>gcCause.cpp</code>文件中查看：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">const</span> <span class="keyword">char</span>* <span class="title">GCCause::to_string</span><span class="params">(GCCause::Cause cause)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (cause) &#123;</span><br><span class="line">    <span class="keyword">case</span> _java_lang_system_gc:</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;System.gc()&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> _full_gc_alot:</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;FullGCAlot&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> _scavenge_alot:</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;ScavengeAlot&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> _allocation_profiler:</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;Allocation Profiler&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> _jvmti_force_gc:</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;JvmtiEnv ForceGarbageCollection&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> _gc_locker:</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;GCLocker Initiated GC&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> _heap_inspection:</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;Heap Inspection Initiated GC&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> _heap_dump:</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;Heap Dump Initiated GC&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> _wb_young_gc:</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;WhiteBox Initiated Young GC&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> _wb_conc_mark:</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;WhiteBox Initiated Concurrent Mark&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> _update_allocation_context_stats_inc:</span><br><span class="line">    <span class="keyword">case</span> _update_allocation_context_stats_full:</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;Update Allocation Context Stats&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> _no_gc:</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;No GC&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> _allocation_failure:</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;Allocation Failure&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> _tenured_generation_full:</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;Tenured Generation Full&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> _metadata_GC_threshold:</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;Metadata GC Threshold&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> _cms_generation_full:</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;CMS Generation Full&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> _cms_initial_mark:</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;CMS Initial Mark&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> _cms_final_remark:</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;CMS Final Remark&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> _cms_concurrent_mark:</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;CMS Concurrent Mark&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> _old_generation_expanded_on_last_scavenge:</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;Old Generation Expanded On Last Scavenge&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> _old_generation_too_full_to_scavenge:</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;Old Generation Too Full To Scavenge&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> _adaptive_size_policy:   <span class="comment">// 看这，后面会使用到。</span></span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;Ergonomics&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> _g1_inc_collection_pause:</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;G1 Evacuation Pause&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> _g1_humongous_allocation:</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;G1 Humongous Allocation&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> _last_ditch_collection:</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;Last ditch collection&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> _last_gc_cause:</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;ILLEGAL VALUE - last gc cause - ILLEGAL VALUE&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;unknown GCCause&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  ShouldNotReachHere();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据GC日志，可以知道，造成本次Full GC的原因是<strong>Ergonomics</strong></p><p>跟踪<code>Parallel Scavenge</code> 垃圾回收器的垃圾回收策略的源码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">PSScavenge::invoke</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  assert(SafepointSynchronize::is_at_safepoint(), <span class="string">&quot;should be at safepoint&quot;</span>);</span><br><span class="line">  assert(Thread::current() == (Thread*)VMThread::vm_thread(), <span class="string">&quot;should be in vm thread&quot;</span>);</span><br><span class="line">  assert(!Universe::heap()-&gt;is_gc_active(), <span class="string">&quot;not reentrant&quot;</span>);</span><br><span class="line"></span><br><span class="line">  ParallelScavengeHeap* <span class="keyword">const</span> heap = (ParallelScavengeHeap*)Universe::heap();</span><br><span class="line">  assert(heap-&gt;kind() == CollectedHeap::ParallelScavengeHeap, <span class="string">&quot;Sanity&quot;</span>);</span><br><span class="line"></span><br><span class="line">  PSAdaptiveSizePolicy* policy = heap-&gt;size_policy();</span><br><span class="line">  IsGCActiveMark mark;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">bool</span> scavenge_done = PSScavenge::invoke_no_policy();</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">bool</span> need_full_gc = !scavenge_done ||</span><br><span class="line">    policy-&gt;should_full_GC(heap-&gt;old_gen()-&gt;free_in_bytes());</span><br><span class="line">  <span class="keyword">bool</span> full_gc_done = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (UsePerfData) &#123;</span><br><span class="line">    PSGCAdaptivePolicyCounters* <span class="keyword">const</span> counters = heap-&gt;gc_policy_counters();</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> ffs_val = need_full_gc ? full_follows_scavenge : not_skipped;</span><br><span class="line">    counters-&gt;update_full_follows_scavenge(ffs_val);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (need_full_gc) &#123;</span><br><span class="line">    <span class="function">GCCauseSetter <span class="title">gccs</span><span class="params">(heap, GCCause::_adaptive_size_policy)</span></span>;</span><br><span class="line">    CollectorPolicy* cp = heap-&gt;collector_policy();</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">bool</span> clear_all_softrefs = cp-&gt;should_clear_all_soft_refs();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (UseParallelOldGC) &#123;</span><br><span class="line">      full_gc_done = PSParallelCompact::invoke_no_policy(clear_all_softrefs);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      full_gc_done = PSMarkSweep::invoke_no_policy(clear_all_softrefs);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> full_gc_done;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中对于Full GC来说比较核心的代码是：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (need_full_gc) &#123;</span><br><span class="line">  <span class="function">GCCauseSetter <span class="title">gccs</span><span class="params">(heap, GCCause::_adaptive_size_policy)</span></span>;</span><br><span class="line">  CollectorPolicy* cp = heap-&gt;collector_policy();</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">bool</span> clear_all_softrefs = cp-&gt;should_clear_all_soft_refs();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (UseParallelOldGC) &#123;</span><br><span class="line">    full_gc_done = PSParallelCompact::invoke_no_policy(clear_all_softrefs);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    full_gc_done = PSMarkSweep::invoke_no_policy(clear_all_softrefs);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要通过一个<code>need_full_gc</code>变量来确认是否需要进行Full GC。根据gcCause也知道<code>GCCause::_adaptive_size_policy</code>就是Ergonomics</p><p>而<code>need_full_gc</code>是怎么确定的呢？</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">bool</span> scavenge_done = PSScavenge::invoke_no_policy();</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">bool</span> need_full_gc = !scavenge_done || policy-&gt;should_full_GC(heap-&gt;old_gen()-&gt;free_in_bytes());</span><br></pre></td></tr></table></figure><p>首先看一下<code>invoke_no_policy</code>方法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// This method contains no policy. You should probably</span></span><br><span class="line"><span class="comment">// be calling invoke() instead.</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">PSScavenge::invoke_no_policy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 前面省略</span></span><br><span class="line">  ParallelScavengeHeap* heap = (ParallelScavengeHeap*)Universe::heap();</span><br><span class="line">    <span class="comment">// 获取GC原因</span></span><br><span class="line">  GCCause::Cause gc_cause = heap-&gt;gc_cause();</span><br><span class="line">  assert(heap-&gt;kind() == CollectedHeap::ParallelScavengeHeap, <span class="string">&quot;Sanity&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Check for potential problems.</span></span><br><span class="line">  <span class="comment">//在youngc之前进行检查，看看是否要直接触发fullgc</span></span><br><span class="line">  <span class="keyword">if</span> (!should_attempt_scavenge()) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">    <span class="comment">//.....   </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>should_attempt_scavenge</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//是否要尝试回收，当返回false-触发fullgc</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">PSScavenge::should_attempt_scavenge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  ParallelScavengeHeap* heap = (ParallelScavengeHeap*)Universe::heap();</span><br><span class="line">  assert(heap-&gt;kind() == CollectedHeap::ParallelScavengeHeap, <span class="string">&quot;Sanity&quot;</span>);</span><br><span class="line">  PSGCAdaptivePolicyCounters* counters = heap-&gt;gc_policy_counters();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (UsePerfData) &#123;</span><br><span class="line">    counters-&gt;update_scavenge_skipped(not_skipped);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  PSYoungGen* young_gen = heap-&gt;young_gen();</span><br><span class="line">  PSOldGen* old_gen = heap-&gt;old_gen();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!ScavengeWithObjectsInToSpace) &#123;</span><br><span class="line">    <span class="comment">// Do not attempt to promote unless to_space is empty</span></span><br><span class="line">      <span class="comment">//若toSpace不为空则直接返回false，触发fullgc</span></span><br><span class="line">    <span class="keyword">if</span> (!young_gen-&gt;to_space()-&gt;is_empty()) &#123;</span><br><span class="line">      _consecutive_skipped_scavenges++;</span><br><span class="line">      <span class="keyword">if</span> (UsePerfData) &#123;</span><br><span class="line">        counters-&gt;update_scavenge_skipped(to_space_not_empty);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Test to see if the scavenge will likely fail.</span></span><br><span class="line">  PSAdaptiveSizePolicy* policy = heap-&gt;size_policy();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// A similar test is done in the policy&#x27;s should_full_GC().  If this is</span></span><br><span class="line">  <span class="comment">// changed, decide if that test should also be changed.</span></span><br><span class="line">  <span class="keyword">size_t</span> avg_promoted = (<span class="keyword">size_t</span>) policy-&gt;padded_average_promoted_in_bytes();</span><br><span class="line">    <span class="comment">//取最小值(之前YGC晋升到old的平均大小，新生代已使用大小)</span></span><br><span class="line">  <span class="keyword">size_t</span> promotion_estimate = MIN2(avg_promoted, young_gen-&gt;used_in_bytes());</span><br><span class="line">    <span class="comment">//若小于old的空闲空间，则表示无需full gc</span></span><br><span class="line">  <span class="keyword">bool</span> result = promotion_estimate &lt; old_gen-&gt;free_in_bytes();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (PrintGCDetails &amp;&amp; Verbose) &#123;</span><br><span class="line">    <span class="comment">//.....</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (result) &#123;</span><br><span class="line">    _consecutive_skipped_scavenges = <span class="number">0</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    _consecutive_skipped_scavenges++;</span><br><span class="line">    <span class="keyword">if</span> (UsePerfData) &#123;</span><br><span class="line">      counters-&gt;update_scavenge_skipped(promoted_too_large);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进入<code>should_full_GC</code>方法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// If the remaining free space in the old generation is less that</span></span><br><span class="line"><span class="comment">// that expected to be needed by the next collection, do a full</span></span><br><span class="line"><span class="comment">// collection now.</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">PSAdaptiveSizePolicy::should_full_GC</span><span class="params">(<span class="keyword">size_t</span> old_free_in_bytes)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// A similar test is done in the scavenge&#x27;s should_attempt_scavenge().  If</span></span><br><span class="line">  <span class="comment">// this is changed, decide if that test should also be changed.</span></span><br><span class="line">  <span class="comment">// 如果晋升到老生代的平均大小大于老生代的剩余大小，则会返回true，认为需要一次full gc。</span></span><br><span class="line">  <span class="keyword">bool</span> result = padded_average_promoted_in_bytes() &gt; (<span class="keyword">float</span>) old_free_in_bytes;</span><br><span class="line">  <span class="keyword">if</span> (PrintGCDetails &amp;&amp; Verbose) &#123;</span><br><span class="line">    <span class="keyword">if</span> (result) &#123;</span><br><span class="line">      gclog_or_tty-&gt;print(<span class="string">&quot;  full after scavenge: &quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      gclog_or_tty-&gt;print(<span class="string">&quot;  no full after scavenge: &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    gclog_or_tty-&gt;print_cr(<span class="string">&quot; average_promoted &quot;</span> SIZE_FORMAT</span><br><span class="line">      <span class="string">&quot; padded_average_promoted &quot;</span> SIZE_FORMAT</span><br><span class="line">      <span class="string">&quot; free in old gen &quot;</span> SIZE_FORMAT,</span><br><span class="line">      (<span class="keyword">size_t</span>) average_promoted_in_bytes(),</span><br><span class="line">      (<span class="keyword">size_t</span>) padded_average_promoted_in_bytes(),</span><br><span class="line">      old_free_in_bytes);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果 <code>padded_average_promoted_in_bytes()</code>大于老生代剩余空间，那么就返回true，表示要触发一次Full GC。</p><p>那么padded_average_promoted_in_bytes()这个平均大小是怎么算出来的呢？我们去看看：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Padded average in bytes</span></span><br><span class="line">size_t padded_average_promoted_in_bytes() <span class="keyword">const</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (size_t)_avg_promoted-&gt;padded_average();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">float padded_average() <span class="keyword">const</span>         &#123; <span class="keyword">return</span> _padded_avg; &#125;</span><br><span class="line"><span class="comment">// A weighted average that includes a deviation from the average,</span></span><br><span class="line"><span class="comment">// some multiple of which is added to the average.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// This serves as our best estimate of an upper bound on a future</span></span><br><span class="line"><span class="comment">// unknown.</span></span><br><span class="line">class AdaptivePaddedAverage : public AdaptiveWeightedAverage &#123;</span><br><span class="line"> private:</span><br><span class="line">  float          _padded_avg;     <span class="comment">// The last computed padded average</span></span><br><span class="line">  float          _deviation;      <span class="comment">// Running deviation from the average</span></span><br><span class="line">  unsigned       _padding;        <span class="comment">// A multiple which, added to the average,</span></span><br><span class="line">                                  <span class="comment">// gives us an upper bound guess.</span></span><br><span class="line"></span><br><span class="line"> protected:</span><br><span class="line">  <span class="keyword">void</span> <span class="function"><span class="title">set_padded_average</span>(<span class="params">float avg</span>)</span>  &#123; _padded_avg = avg;  &#125;</span><br><span class="line">  <span class="keyword">void</span> <span class="function"><span class="title">set_deviation</span>(<span class="params">float dev</span>)</span>       &#123; _deviation  = dev;  &#125;</span><br><span class="line"></span><br><span class="line"> public:</span><br><span class="line">  AdaptivePaddedAverage() :</span><br><span class="line">    AdaptiveWeightedAverage(<span class="number">0</span>),</span><br><span class="line">    _padded_avg(<span class="number">0.0</span>), _deviation(<span class="number">0.0</span>), <span class="function"><span class="title">_padding</span>(<span class="params"><span class="number">0</span></span>)</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">  AdaptivePaddedAverage(unsigned weight, unsigned padding) :</span><br><span class="line">    AdaptiveWeightedAverage(weight),</span><br><span class="line">    _padded_avg(<span class="number">0.0</span>), _deviation(<span class="number">0.0</span>), <span class="function"><span class="title">_padding</span>(<span class="params">padding</span>)</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Placement support</span></span><br><span class="line">  <span class="keyword">void</span>* operator <span class="keyword">new</span>(size_t ignored, <span class="keyword">void</span>* p) <span class="keyword">throw</span>() &#123; <span class="keyword">return</span> p; &#125;</span><br><span class="line">  <span class="comment">// Allocator</span></span><br><span class="line">  <span class="keyword">void</span>* operator <span class="keyword">new</span>(size_t size) <span class="keyword">throw</span>() &#123; <span class="keyword">return</span> CHeapObj&lt;mtGC&gt;::operator <span class="keyword">new</span>(size); &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Accessor</span></span><br><span class="line">  float padded_average() <span class="keyword">const</span>         &#123; <span class="keyword">return</span> _padded_avg; &#125;</span><br><span class="line">  float deviation()      <span class="keyword">const</span>         &#123; <span class="keyword">return</span> _deviation;  &#125;</span><br><span class="line">  unsigned padding()     <span class="keyword">const</span>         &#123; <span class="keyword">return</span> _padding;    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> <span class="function"><span class="title">clear</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    AdaptiveWeightedAverage::clear();</span><br><span class="line">    _padded_avg = <span class="number">0</span>;</span><br><span class="line">    _deviation = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Override</span></span><br><span class="line">  <span class="keyword">void</span>  sample(float new_sample);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Printing</span></span><br><span class="line">  <span class="keyword">void</span> print_on(outputStream* st) <span class="keyword">const</span>;</span><br><span class="line">  <span class="keyword">void</span> print() <span class="keyword">const</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>可以从代码和注释中我们发现：<strong>加权平均值包括与平均值的偏差，其平均值加上其中的一些倍数。 这是对未来未知数的上限的最佳估计。</strong></p><p>也就是通过这样的算法，<strong>虚拟机估算出下次分配可能会发生无法分配的问题</strong>，于是<strong>提前预测到可能的问题，提前发生一次Full GC</strong>。</p><p>在JVM中的垃圾收集器中的Ergonomics就是负责自动的调解GC暂停时间和吞吐量之间的平衡，然后你的虚拟机性能更好的一种做法。对于注重吞吐量的收集器来说，在某个generation被过渡使用之前，GC Ergonomics就会启动一次GC。</p><h3 id="动态年龄判定"><a href="#动态年龄判定" class="headerlink" title="动态年龄判定"></a>动态年龄判定</h3><blockquote><p>为了更好的适应不同程序的内存状况，虚拟机并不是永远地要求对象的年龄必须达到了<code>MaxTenuringThreshold</code>才能晋升老年代，如果在Survivor空间中相同年龄所有对象大小的总和大于Survivor空间的一半，年龄大于或等于该年龄的对象就可以直接进入老年代，无须等到<code>MaxTenuringThreshold</code>中要求的年龄。       </p><p>来自《深入理解Java虚拟机》</p></blockquote><p>上面有一个误解，就是并不需要是<strong>相同的年龄</strong>的对象占用空间的大小大于Survivor空间的一半才会晋升。而是<strong>按照年龄从小到大对其所占用的大小进行累积，当累积的某个年龄大小超过了survivor区的一半时，取这个年龄和<code>MaxTenuringThreshold</code>中更小的一个值，作为新的晋升年龄阈值。</strong></p><p>下面使用一个例子来实际分析一下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> _1MB = <span class="number">1024</span> * <span class="number">1024</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">byte</span>[] a1, a2, a3, a4;</span><br><span class="line">    <span class="comment">//a1 + a2大于survivor空间一半</span></span><br><span class="line">    a1 = <span class="keyword">new</span> <span class="keyword">byte</span>[_1MB / <span class="number">4</span>];</span><br><span class="line">    a2 = <span class="keyword">new</span> <span class="keyword">byte</span>[_1MB / <span class="number">4</span>];</span><br><span class="line">    a3 = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">4</span> * _1MB];</span><br><span class="line">    a4 = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">4</span> * _1MB];</span><br><span class="line">    a4 = <span class="keyword">null</span>;</span><br><span class="line">    a4 = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">4</span> * _1MB];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>设置启动参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-XX:+UseSerialGC   # 因为使用PS收集器会满足大对象进入老年代的限制，所以使用Serial</span><br><span class="line">-Xms20M</span><br><span class="line">-Xmx20M</span><br><span class="line">-Xmn10M</span><br><span class="line">-XX:SurvivorRatio&#x3D;8</span><br><span class="line">-XX:+PrintGCDetails</span><br><span class="line">-XX:MaxTenuringThreshold&#x3D;15</span><br></pre></td></tr></table></figure><p>输出日志：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[GC (Allocation Failure) [DefNew</span><br><span class="line">Desired survivor size 524288 bytes, new threshold 1 (max 15)</span><br><span class="line">- age   1:    1048568 bytes,    1048568 total</span><br><span class="line">: 6609K-&gt;1023K(9216K), 0.0047654 secs] 6609K-&gt;5208K(19456K), 0.0048379 secs] [Times: user&#x3D;0.00 sys&#x3D;0.00, real&#x3D;0.01 secs] </span><br><span class="line">[GC (Allocation Failure) [DefNew</span><br><span class="line">Desired survivor size 524288 bytes, new threshold 15 (max 15)</span><br><span class="line">- age   1:        800 bytes,        800 total</span><br><span class="line">: 5204K-&gt;0K(9216K), 0.0013057 secs] 9388K-&gt;5209K(19456K), 0.0013293 secs] [Times: user&#x3D;0.00 sys&#x3D;0.00, real&#x3D;0.00 secs] </span><br><span class="line">Heap</span><br><span class="line"> def new generation   total 9216K, used 4234K [0x00000000fec00000, 0x00000000ff600000, 0x00000000ff600000)</span><br><span class="line">  eden space 8192K,  51% used [0x00000000fec00000, 0x00000000ff022728, 0x00000000ff400000)</span><br><span class="line">  from space 1024K,   0% used [0x00000000ff400000, 0x00000000ff400320, 0x00000000ff500000)</span><br><span class="line">  to   space 1024K,   0% used [0x00000000ff500000, 0x00000000ff500000, 0x00000000ff600000)</span><br><span class="line"> tenured generation   total 10240K, used 5208K [0x00000000ff600000, 0x0000000100000000, 0x0000000100000000)</span><br><span class="line">   the space 10240K,  50% used [0x00000000ff600000, 0x00000000ffb16350, 0x00000000ffb16400, 0x0000000100000000)</span><br><span class="line"> Metaspace       used 3204K, capacity 4496K, committed 4864K, reserved 1056768K</span><br><span class="line">  class space    used 345K, capacity 388K, committed 512K, reserved 1048576K</span><br></pre></td></tr></table></figure><p>根据启动参数可以知道，初始的内存分布如下：</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/sxfsuma/cloudImg//data/img/%E5%88%9D%E5%A7%8B%E5%86%85%E5%AD%98%E5%88%86%E5%B8%83.png" alt="初始内存分布"></p><p>所以a1，a2，a3都是可以正常分配的。在进行第一次a4对象内存分配时，M/4+M/4+4M&gt;4608k（这里的大于是因为对象内存分配时还需要加上对象头以及内存补白等空间），所以8M-4608k&lt;4096k(4M)；</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/sxfsuma/cloudImg//data/img/%E7%AC%AC%E4%B8%80%E6%AC%A1a4%E5%88%86%E9%85%8D.png" alt="第一次a4分配.png"></p><p>所以垃圾收集器进行一次Minor GC；</p><p>GC的具体情况为，首先会将a1,a2两个对象复制到幸存者区，此时需要注意：（M/4*2=M/2=512k，加上对象头等数据则当前幸存者区被占用的内存超过了512k，即超过了幸存者区内存的1/2，所以新的阈值为：threshold=1）a3将直接复制到老年代，因为幸存者区不够放下a3，所以触发空间分配担保机制，将a3直接复制到老年代中，此时Eden区可以容纳a4对象。</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/sxfsuma/cloudImg//data/img/%E7%AC%AC%E4%B8%80%E6%AC%A1YoungGc.png" alt="第一YoungGC.png"></p><p>对应的GC日志为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[GC (Allocation Failure) [DefNew</span><br><span class="line">Desired survivor size 524288 bytes, new threshold 1 (max 15)  &#x2F;&#x2F; 看这，新的阈值</span><br><span class="line">- age   1:    1048568 bytes,    1048568 total</span><br><span class="line">: 6609K-&gt;1023K(9216K), 0.0047654 secs] 6609K-&gt;5208K(19456K), 0.0048379 secs] [Times: user&#x3D;0.00 sys&#x3D;0.00, real&#x3D;0.01 secs] </span><br></pre></td></tr></table></figure><p>经过<code>a4 = null;</code>处理。第一次分配的对象就处于不可达的状态了，因为没有引用指向它了，这个对象就是可回收的对象了，然后再次执行</p><p><code>a4 = new byte[4 * _1MB];</code>时Eden区由于还存储着一个&gt;4M（包含对象头与内存补白）的对象，所以Eden区8M内存不足以再容易这个大于4M的对象内存，于是收集器又一次发起一个针对Young区的GC操作；</p><p>GC的过程如下：</p><p>经过<code>a4 = null;</code>所指向的对象会被垃圾回收掉。此时的Eden区就清空了，内存空间占用为0；新的对象可以在Eden区进行分配。</p><p>而from区(Survivor区)中由于上一次GC之后，进入老年代的年龄阈值被设置为了1，所以a1,a2对象的年龄已经达到了进入老年代 阈值，所以会被移到老年代中。</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/sxfsuma/cloudImg//data/img/%E7%AC%AC%E4%BA%8C%E6%AC%A1YoungGc.png" alt="第二次YoungGc.png"></p><p>对应的GC日志：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[GC (Allocation Failure) [DefNew</span><br><span class="line">Desired survivor size 524288 bytes, new threshold 15 (max 15) &#x2F;&#x2F; 看这，阈值恢复</span><br><span class="line">- age   1:        800 bytes,        800 total</span><br><span class="line">: 5204K-&gt;0K(9216K), 0.0013057 secs] 9388K-&gt;5209K(19456K), 0.0013293 secs] [Times: user&#x3D;0.00 sys&#x3D;0.00, real&#x3D;0.00 secs] </span><br></pre></td></tr></table></figure><p>最终堆内的情况为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Heap</span><br><span class="line"> def new generation   total 9216K, used 4234K [0x00000000fec00000, 0x00000000ff600000, 0x00000000ff600000)</span><br><span class="line">  eden space 8192K,  51% used [0x00000000fec00000, 0x00000000ff022728, 0x00000000ff400000)</span><br><span class="line">  from space 1024K,   0% used [0x00000000ff400000, 0x00000000ff400320, 0x00000000ff500000)</span><br><span class="line">  to   space 1024K,   0% used [0x00000000ff500000, 0x00000000ff500000, 0x00000000ff600000)</span><br><span class="line"> tenured generation   total 10240K, used 5208K [0x00000000ff600000, 0x0000000100000000, 0x0000000100000000)</span><br><span class="line">   the space 10240K,  50% used [0x00000000ff600000, 0x00000000ffb16350, 0x00000000ffb16400, 0x0000000100000000)</span><br><span class="line"> Metaspace       used 3204K, capacity 4496K, committed 4864K, reserved 1056768K</span><br><span class="line">  class space    used 345K, capacity 388K, committed 512K, reserved 1048576K</span><br></pre></td></tr></table></figure><p><code>JVM</code>中还有另外一个参数：<code>-XX:TargetSurvivorRatio</code>，这是期望survivor区存活大小的参数，默认是50，即50%。而在<code>ageTable.cpp</code>的动态计算方法<code>ageTable::compute_tenuring_threshold</code>中则使用到了这个参数进行计算<code>desired_survivor_size</code>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">uint <span class="title">ageTable::compute_tenuring_threshold</span><span class="params">(<span class="keyword">size_t</span> survivor_capacity)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">size_t</span> desired_survivor_size = (<span class="keyword">size_t</span>)((((<span class="keyword">double</span>) survivor_capacity)*TargetSurvivorRatio)/<span class="number">100</span>);</span><br><span class="line">  <span class="keyword">size_t</span> total = <span class="number">0</span>;</span><br><span class="line">  uint age = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span> (age &lt; table_size) &#123;</span><br><span class="line">    total += sizes[age];</span><br><span class="line">    <span class="comment">// check if including objects of age &#x27;age&#x27; made us pass the desired</span></span><br><span class="line">    <span class="comment">// size, if so &#x27;age&#x27; is the new threshold</span></span><br><span class="line">    <span class="keyword">if</span> (total &gt; desired_survivor_size) <span class="keyword">break</span>;</span><br><span class="line">    age++;</span><br><span class="line">  &#125;</span><br><span class="line">  uint result = age &lt; MaxTenuringThreshold ? age : MaxTenuringThreshold;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单的说即默认情况下如果某一年龄值的超过了survivor的50%，此年龄值与<code>MaxTenuringThreshold</code>两者中更小的值将会成为新的晋升阈值。</p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p>《深入理解Java虚拟机》（第二版） 周志明</p><p><a href="https://www.doudaxia.club/index.php/archives/135/">https://www.doudaxia.club/index.php/archives/135/</a></p><p><a href="https://www.doudaxia.club/index.php/archives/90/">https://www.doudaxia.club/index.php/archives/90/</a></p><p><a href="http://www.reins.altervista.org/java/gc1.4.2_faq.html">http://www.reins.altervista.org/java/gc1.4.2_faq.html</a></p><p><a href="https://blog.csdn.net/qq_24986539/article/details/107904163">https://blog.csdn.net/qq_24986539/article/details/107904163</a></p><p><a href="https://cloud.tencent.com/developer/article/1082687">https://cloud.tencent.com/developer/article/1082687</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jvm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 对象大小计算</title>
      <link href="2019/12/19/java/basic/Java-%E5%AF%B9%E8%B1%A1%E5%A4%A7%E5%B0%8F%E7%9A%84%E8%AE%A1%E7%AE%97/"/>
      <url>2019/12/19/java/basic/Java-%E5%AF%B9%E8%B1%A1%E5%A4%A7%E5%B0%8F%E7%9A%84%E8%AE%A1%E7%AE%97/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>​       之前 一直没有关注一个Java 对象会占用多少内存，最近在工作中的一些场景，本地缓存中需要存储大量的数据，需要考虑对象在内存中占用多少内存，借此机会，整理一下如何计算一个Java对象的大小，方便以后回顾和复习，本文主要从以下四个小节进行描述。</p><ol><li>Java对象的结构以及如何在内存中存储的。</li><li>如何计算一个Java对象占用内存大小。</li><li>实验验证</li><li>总结</li></ol><a id="more"></a><h2 id="Java对象的结构"><a href="#Java对象的结构" class="headerlink" title="Java对象的结构"></a>Java对象的结构</h2><p>首先来了解一下Java实例对象的结构是什么样子的。</p><p>在<code>HotSpot</code>虚拟机中,对象在内存中存储的布局可以分为3块区域：</p><ul><li><p>对象头（Header）</p></li><li><p>实例数据（Instance Data）</p></li><li><p>对象填充（Padding）</p></li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/12/21/hszlDCTvAnP2BFK.png"></p><ul><li><p><strong>对象头</strong>：<code>Hotspot</code>虚拟机的对象头主要包括两部分数据：Mark Word（标记字段）、Class Pointer（类型指针）。Array Length（数组长度，数组对象才有）</p></li><li><p><strong>实例数据</strong>：对象真正存储的有效信息，存放类的属性数据信息，包括父类的属性信息。</p></li><li><p><strong>对齐填充</strong>：由于虚拟机要求 对象起始地址必须是8字节的整数倍。<strong>填充数据不是必须存在的</strong>，仅仅是为了字节对齐。</p></li></ul><p>  一个对象可能存在如下两种结构：</p><p>  <img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/sxfsuma/cloudImg//data/img/object_structure.png" alt="object_structure.png"></p><h3 id="对象头"><a href="#对象头" class="headerlink" title="对象头"></a>对象头</h3><p>  对象头主要包括以下几部分数据：</p><ul><li>Mark Word（标记字段）</li><li>Class Pointer（类型指针）</li><li>数组长度（如果有的话）</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2019/12/21/vH9ROSwaY62WAns.png"></p><p>  <strong>Mark Word</strong> ：用于存储对象自身的运行时数据，它是实现轻量级锁和偏向锁的关键。</p><p>  <strong>Class Pointer</strong>：是对象指向它的类元数据的指针，虚拟机通过这个指针来确定这个对象是哪个类的实例</p><p>  <strong>数组长度</strong>：只有当本对象是一个数组对象时才会有这个部分</p><p>参考<a href="https://github.com/openjdk-mirror/jdk7u-hotspot/tree/50bdefc3afe944ca74c3093e7448d6b889cd20d1/src">OpenJDK中JVM源码</a>部分，对象头的C++定义如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">oopDesc</span> &#123;</span></span><br><span class="line">  <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">VMStructs</span>;</span></span><br><span class="line"> <span class="keyword">private</span>:</span><br><span class="line">  <span class="keyword">volatile</span> markOop  _mark;</span><br><span class="line">  <span class="class"><span class="keyword">union</span> _<span class="title">metadata</span> &#123;</span></span><br><span class="line">    wideKlassOop    _klass;</span><br><span class="line">    narrowOop       _compressed_klass;</span><br><span class="line">  &#125; _metadata;</span><br></pre></td></tr></table></figure><blockquote><p>源码里的<code>_mark</code>和 <code>_metadata</code>两个字段就是对象头的定义，分别表示对象头中的两个基本组成部分mark word 和 class pointer，<code>_mark</code>用于存储<code>hash</code>、<code>gc</code>年龄、锁标记、偏向锁、自旋时间等，而<code>_metadata</code>是个共用体(union)，即<code>_klass</code>字段或<code>_compressed_klass</code>，存储当前对象到所在<code>class</code>的引用，而这个引用的要么由<code>_klass</code>来存储，要么由<code>_compressed_klass</code>来存储，其中<code>_compressed_klass</code>表示压缩的<code>class</code>指针，即当<code>JVM</code>开启了 <code>-XX:UseCompressedOops</code>选项时，就表示启用指针压缩选项，自然就使用<code>_commpressed_klass</code>来存储<code>class</code>引用了，否则使用<code>_klass</code>。</p><p>注意到，<code>_mark</code>的类型是 <code>markOop</code>，而<code>_metadata</code>的类型是<code>union</code>，<code>_metadata</code>内部两个字段：<code>_klass</code>和<code>_compressed_klass</code>类型分别为<code>wideKlassOop</code>和<code>narrowOop</code>，分别表示什么意思呢？</p><p>这里顺便说一个<code>union</code>联合体的概念，这是在C++中的一种结构声明，类似<code>struct</code>，称作：“联合”，它是一种特殊的类，也是一种构造类型的数据结构。在一个“联合”内可以定义多种不同的数据类型， 一个被说明为该“联合”类型的变量中，允许装入该“联合”所定义的任何一种数据，这些数据共享同一段内存，已达到节省空间的目的。由此可见，刚刚所说的使用<code>-XX:UseCompressedOops</code>后，就自动使用<code>_metadata</code>中的<code>_compressed_klass</code>来作为指向当前对象的<code>class</code>引用，它的类型是<code>narrowOop</code>。可以看到，对象头中的两个字段的定义都包含了<code>“Oop”</code>字眼，不难猜出，这是一种在<code>JVM</code>层定义好的“类型”。</p><p>摘抄自  <a href="https://www.jianshu.com/p/9d729c9c94c4">https://www.jianshu.com/p/9d729c9c94c4</a></p></blockquote><p>想要有更清晰的理解，需要去深入理解<code>HotSpot</code>的<code>OOP-Klass</code>模型，不是本文讨论的重点，所以不在此展开描述。</p><h4 id="Mark-Word"><a href="#Mark-Word" class="headerlink" title="Mark Word"></a>Mark Word</h4><p>Mark Word 用于存储对象自身的运行时数据，如哈希码（hash code）、GC分代年龄、锁状态标志、线程持有的锁、偏向线程 ID、偏向时间戳等。</p><p>在32位的<code>HotSpot</code>虚拟机中，如果对象处于未被锁定的状态下，那么Mark Word的32bit空间里的25位用于存储对象哈希码，4bit用于存储对象分代年龄，2bit用于存储锁标志位，1bit固定为0，表示非偏向锁。</p><p>关于Mark Word的结构，定义在<code>markOop.hpp</code>文件中，几行重要的注释，揭示了32位机器和64位机器下，对象头中mark word的格式：</p><p><em>以下注释来自于<code>openjdk8u272-ga</code></em></p><figure class="highlight hpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Bit-format of an object header (most significant first, big endian layout below):</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  32 bits:</span></span><br><span class="line"><span class="comment">//  --------</span></span><br><span class="line"><span class="comment">//             hash:25 ------------&gt;| age:4    biased_lock:1 lock:2 (normal object)</span></span><br><span class="line"><span class="comment">//             JavaThread*:23 epoch:2 age:4    biased_lock:1 lock:2 (biased object)</span></span><br><span class="line"><span class="comment">//             size:32 ------------------------------------------&gt;| (CMS free block)</span></span><br><span class="line"><span class="comment">//             PromotedObject*:29 ----------&gt;| promo_bits:3 -----&gt;| (CMS promoted object)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  64 bits:</span></span><br><span class="line"><span class="comment">//  --------</span></span><br><span class="line"><span class="comment">//  unused:25 hash:31 --&gt;| unused:1   age:4    biased_lock:1 lock:2 (normal object)</span></span><br><span class="line"><span class="comment">//  JavaThread*:54 epoch:2 unused:1   age:4    biased_lock:1 lock:2 (biased object)</span></span><br><span class="line"><span class="comment">//  PromotedObject*:61 ---------------------&gt;| promo_bits:3 -----&gt;| (CMS promoted object)</span></span><br><span class="line"><span class="comment">//  size:64 -----------------------------------------------------&gt;| (CMS free block)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  unused:25 hash:31 --&gt;| cms_free:1 age:4    biased_lock:1 lock:2 (COOPs &amp;&amp; normal object)</span></span><br><span class="line"><span class="comment">//  JavaThread*:54 epoch:2 cms_free:1 age:4    biased_lock:1 lock:2 (COOPs &amp;&amp; biased object)</span></span><br><span class="line"><span class="comment">//  narrowOop:32 unused:24 cms_free:1 unused:4 promo_bits:3 -----&gt;| (COOPs &amp;&amp; CMS promoted object)</span></span><br><span class="line"><span class="comment">//  unused:21 size:35 --&gt;| cms_free:1 unused:7 ------------------&gt;| (COOPs &amp;&amp; CMS free block)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  - hash contains the identity hash value: largest value is</span></span><br><span class="line"><span class="comment">//    31 bits, see os::random().  Also, 64-bit vm&#x27;s require</span></span><br><span class="line"><span class="comment">//    a hash value no bigger than 32 bits because they will not</span></span><br><span class="line"><span class="comment">//    properly generate a mask larger than that: see library_call.cpp</span></span><br><span class="line"><span class="comment">//    and c1_CodePatterns_sparc.cpp.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  - the biased lock pattern is used to bias a lock toward a given</span></span><br><span class="line"><span class="comment">//    thread. When this pattern is set in the low three bits, the lock</span></span><br><span class="line"><span class="comment">//    is either biased toward a given thread or &quot;anonymously&quot; biased,</span></span><br><span class="line"><span class="comment">//    indicating that it is possible for it to be biased. When the</span></span><br><span class="line"><span class="comment">//    lock is biased toward a given thread, locking and unlocking can</span></span><br><span class="line"><span class="comment">//    be performed by that thread without using atomic operations.</span></span><br><span class="line"><span class="comment">//    When a lock&#x27;s bias is revoked, it reverts back to the normal</span></span><br><span class="line"><span class="comment">//    locking scheme described below.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    Note that we are overloading the meaning of the &quot;unlocked&quot; state</span></span><br><span class="line"><span class="comment">//    of the header. Because we steal a bit from the age we can</span></span><br><span class="line"><span class="comment">//    guarantee that the bias pattern will never be seen for a truly</span></span><br><span class="line"><span class="comment">//    unlocked object.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    Note also that the biased state contains the age bits normally</span></span><br><span class="line"><span class="comment">//    contained in the object header. Large increases in scavenge</span></span><br><span class="line"><span class="comment">//    times were seen when these bits were absent and an arbitrary age</span></span><br><span class="line"><span class="comment">//    assigned to all biased objects, because they tended to consume a</span></span><br><span class="line"><span class="comment">//    significant fraction of the eden semispaces and were not</span></span><br><span class="line"><span class="comment">//    promoted promptly, causing an increase in the amount of copying</span></span><br><span class="line"><span class="comment">//    performed. The runtime system aligns all JavaThread* pointers to</span></span><br><span class="line"><span class="comment">//    a very large value (currently 128 bytes (32bVM) or 256 bytes (64bVM))</span></span><br><span class="line"><span class="comment">//    to make room for the age bits &amp; the epoch bits (used in support of</span></span><br><span class="line"><span class="comment">//    biased locking), and for the CMS &quot;freeness&quot; bit in the 64bVM (+COOPs).</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    [JavaThread* | epoch | age | 1 | 01]       lock is biased toward given thread</span></span><br><span class="line"><span class="comment">//    [0           | epoch | age | 1 | 01]       lock is anonymously biased</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  - the two lock bits are used to describe three states: locked/unlocked and monitor.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    [ptr             | 00]  locked             ptr points to real header on stack</span></span><br><span class="line"><span class="comment">//    [header      | 0 | 01]  unlocked           regular object header</span></span><br><span class="line"><span class="comment">//    [ptr             | 10]  monitor            inflated lock (header is wapped out)</span></span><br><span class="line"><span class="comment">//    [ptr             | 11]  marked             used by markSweep to mark an object</span></span><br><span class="line"><span class="comment">//                                               not valid at any other time</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    We assume that stack/thread pointers have the lowest two bits cleared.</span></span><br></pre></td></tr></table></figure><p>其中的一些字段解释如下：</p><ul><li><code>biased_lock</code>：对象是否启用偏向锁标记，只占1个二进制位。为1时表示对象启用偏向锁，为0时表示对象没有偏向锁。lock和biased_lock共同表示对象处于什么锁状态。</li><li><code>age</code>：4位的Java对象年龄。在GC中，如果对象在Survivor区复制一次，年龄增加1。当对象达到设定的阈值时，将会晋升到老年代。由于age只有4位，所以最大值为15。</li><li><code>hash</code>：32位的JVM中占25位，在64位JVM中占31位，对象标识<code>hash code</code>，采用延迟加载技术。调用方法<code>System.identityHashCode()</code>计算，并会将结果写到该对象头中。当对象加锁后（偏向、轻量级、重量级），<code>MarkWord</code>的字节没有足够的空间保存<code>hashCode</code>，因此该值会移动到管程<code>Monitor</code>中。</li><li><code>JavaThread</code>：持有偏向锁的线程ID。</li><li><code>epoch</code>：偏向锁的时间戳。</li></ul><p>实际上，<code>mark word</code>的设计非常像网络协议报文头：将<code>mark word</code>划分为多个比特位区间，并在不同的对象状态下赋予不同的含义。</p><table borderCollapse="collapse" border="1" solid=#555555>  <tr align="center">     <th colspan="6" bgcolor=#D2691E>Mark Word (32bit)</th>  </tr>  <tr align="center">    <th rowspan="2" border="1" bgcolor=#E6E6FA>锁状态</th>    <th colspan="2" bgcolor=#E6E6FA>25bit</th>    <th rowspan="2" bgcolor=#E6E6FA>4bit</th>    <th bgcolor=#E6E6FA>1bit</th>    <th bgcolor=#E6E6FA>2bit</th>  </tr>  <tr align="center">    <td bgcolor=#E6E6FA>23bit</td>    <td bgcolor=#E6E6FA>2bit</td>    <td bgcolor=#E6E6FA>是否偏向锁</td>    <td bgcolor=#E6E6FA>锁标志位</td>  </tr>  <tr align="center">    <td>无锁状态</td>    <td colspan="2">对象的hash code</td>    <td>分代年龄</td>      <td>0</td>      <td>01</td>  </tr>  <tr align="center">    <td>轻量级锁</td>    <td  colspan="4">指向栈中锁记录的指针</td>    <td>00</td>  </tr>    <tr align="center">    <td>重量级锁</td>    <td  colspan="4">指向互斥量(重量级锁)的指针</td>    <td>10</td>  </tr>    <tr align="center">    <td>GC标志</td>    <td  colspan="4">unused</td>    <td>11</td>  </tr>    <tr align="center">    <td>偏向锁</td>    <td>线程ID</td>    <td>epoch</td>    <td>分代年龄</td>    <td>1</td>    <td>01</td>  </tr></table><p>在64位的JVM中，Mark Word区域占用8字节，也就是64位。</p><table borderCollapse="collapse" border="1" solid=#555555>  <tr align="center">     <th colspan="10" bgcolor=#D2691E>Mark Word (64bit)</th>  </tr>  <tr align="center">    <th rowspan="2" border="1" bgcolor=#E6E6FA>锁状态</th>    <th colspan="2" bgcolor=#E6E6FA>25bit</th>    <th colspan="3" bgcolor=#E6E6FA>31bit</th>    <th bgcolor=#E6E6FA rowspan="2">1bit</th>    <th bgcolor=#E6E6FA rowspan="2">4bit</th>    <th bgcolor=#E6E6FA>1bit</th>    <th bgcolor=#E6E6FA>2bit</th>  </tr>  <tr align="center">    <td colspan="4" bgcolor=#E6E6FA>54bit</td>    <td bgcolor=#E6E6FA>2bit</td>    <td bgcolor=#E6E6FA>是否偏向锁</td>    <td bgcolor=#E6E6FA>锁标志位</td>  </tr>  <tr align="center">    <td>无锁状态</td>    <td colspan="2">unused</td>    <td colspan="3">对象的hash code</td>    <td>unused</td>    <td>分代年龄</td>    <td>0</td>    <td>01</td>  </tr>  <tr align="center">    <td>轻量级锁</td>    <td  colspan="8">指向栈中锁记录的指针</td>    <td>00</td>  </tr>    <tr align="center">    <td>重量级锁</td>    <td  colspan="8">指向互斥量(重量级锁)的指针</td>    <td>10</td>  </tr>    <tr align="center">    <td>GC标志</td>    <td  colspan="8">unused</td>    <td>11</td>  </tr>    <tr align="center">    <td>偏向锁</td>    <td colspan="4" >线程ID</td>    <td>epoch</td>    <td>unused</td>    <td>分代年龄</td>    <td>1</td>    <td>01</td>  </tr></table><h4 id="Class-Pointer"><a href="#Class-Pointer" class="headerlink" title="Class Pointer"></a>Class Pointer</h4><p>这一部分用于存储对象的类型指针，该指针指向它的类元数据，<code>JVM</code>通过这个指针确定对象是哪个类的实例。该指针的位长度为<code>JVM</code>的一个字大小，即32位的<code>JVM</code>为32位，64位的<code>JVM</code>为64位。如果应用的对象过多，使用64位的指针将浪费大量内存，统计而言，64位的<code>JVM</code>将会比32位的<code>JVM</code>多耗费50%的内存。为了节约内存可以使用选项<code>+UseCompressedOops</code>开启指针压缩。开启该选项后，下列指针将压缩至32位：</p><ol><li>每个Class的属性指针（即静态变量）</li><li>每个对象的属性指针（即对象变量）</li><li>普通对象数组的每个元素指针</li></ol><p>当然，也不是所有的指针都会压缩，一些特殊类型的指针<code>JVM</code>不会优化，比如指向<code>PermGen</code>的Class对象指针(JDK 1.8中指向元空间的Class对象指针)、本地变量、堆栈元素、入参、返回值和NULL指针等。</p><h4 id="数组长度"><a href="#数组长度" class="headerlink" title="数组长度"></a>数组长度</h4><p>如果对象是一个数组，那么对象头还需要有额外的空间用于存储数组的长度，这部分数据的长度也随着<code>JVM</code>架构的不同而不同：32位的<code>JVM</code>上，长度为32位；64位<code>JVM</code>则为64位。64位<code>JVM</code>如果开启<code>+UseCompressedOops</code>选项，该区域长度也将由64位压缩至32位。</p><p>根据以上描述，总结如下：</p><table><thead><tr><th>类型</th><th>32位JVM</th><th>64位JVM</th></tr></thead><tbody><tr><td>markword</td><td>32bit</td><td>64bit</td></tr><tr><td>类型指针</td><td>32bit</td><td>64bit ，开启指针压缩时为32bit</td></tr><tr><td>数组长度</td><td>32bit</td><td>64bit ，开启指针压缩时为32bit</td></tr></tbody></table><h3 id="实例数据"><a href="#实例数据" class="headerlink" title="实例数据"></a>实例数据</h3><p>这部分数据才是真正具有业务意义的数据，实例数据instance Data是占用堆内存的主要部分，它们都是对象的实例字段。那么计算这些字段的大小，主要思路就是根据这些字段的类型大小进行求和的。在<code>JVM</code>中，对象的字段是由基本数据类型和引用类型组成的。其所占用空间的大小如下所示：</p><table><thead><tr><th>类型</th><th>大小（字节）</th></tr></thead><tbody><tr><td>byte / boolean</td><td>1</td></tr><tr><td>int / float</td><td>4</td></tr><tr><td>char / short</td><td>2</td></tr><tr><td>double / long</td><td>8</td></tr><tr><td>ref(引用类型)</td><td>4(32bit)   OR   8(64bit)  OR  4( 64bit &amp;&amp; <code>-XX:UseCompressedOops</code>)</td></tr></tbody></table><blockquote><p>说明：其中ref表示引用类型，引用类型实际上是一个地址指针，32bit机器上，占用4字节，64bit机器上，在jdk1.6之后，如果开启了指针压缩(默认开启:<code>-XX:UseCompressedOops</code>，仅支持64位机器)，则占用4字节。</p><p>Java对象的所有字段类型都可映射为上述类型之一，因此实例数据部分的大小，实际上就是这些字段类型的大小之和。</p><p>当然，实际情况可能比这个稍微复杂一点，如字段排序、内部padding以及父类字段大小的计算等。</p></blockquote><p>字段类型的标准大小，如上表描述，除了引用类型会受CPU架构及是否开启指针压缩影响外，其它都是固定的。因此计算起来比较简单。但实际情其实并不这么简单。</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/sxfsuma/cloudImg//data/img/%E4%B8%BE%E4%B8%AA%E6%A0%97%E5%AD%90.jpg"></p><p>例如如下对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span></span>&#123;</span><br><span class="line">   <span class="keyword">int</span> age = <span class="number">20</span>;</span><br><span class="line">   String name = <span class="string">&quot;Xiaoming&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">extends</span> <span class="title">People</span></span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> married = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">long</span> birthday = <span class="number">128902093242L</span>;</span><br><span class="line">    <span class="keyword">char</span> tag = <span class="string">&#x27;c&#x27;</span>;</span><br><span class="line">    <span class="keyword">double</span> sallary = <span class="number">1200.00d</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Person对象实例数据的大小应该是多少呢？</p><p>这里假设使用64位机器，采用指针压缩，则对象头的大小为：8(<code>_mark</code>)+4(<code>_klass</code>) = 12</p><p>然后实例数据的大小为： 4(<code>age</code>)+4(<code>name</code> 此时当成成引用类型计算)  + 8(<code>birthday</code>) + 8(<code>sallary</code>) + 2(<code>tag</code>) + 1(<code>married</code>) = 27<br>因此最终的对象本身大小为：12+27+1(padding) = 40字节</p><p><strong>注意，为了尽量减少内存空间的占用，这里在计算的过程中需要遵循以下几个规则：</strong></p><ul><li><p>1: 除了对象整体需要按8字节对齐外，每个成员变量都尽量使本身的大小在内存中尽量对齐。比如 int 按 4 位对齐，long 按 8 位对齐。</p></li><li><p>2：类属性按照如下优先级进行排列：长整型和双精度类型；整型和浮点型；字符和短整型；字节类型和布尔类型，最后是引用类型。这些属性都按照各自的单位对齐。也就是从长到短排列，引用排最后: ==&gt; long/double –&gt; int/float –&gt; short/char –&gt; byte/boolean –&gt; Reference</p></li><li><p>3：优先按照规则一和二处理父类中的成员，接着才是子类的成员。</p></li><li><p>4：当父类中最后一个成员和子类第一个成员的间隔如果不够4个字节的话，就必须扩展到4个字节的基本单位。</p></li><li><p>5：如果子类第一个成员是一个双精度或者长整型，并且父类并没有用完8个字节，JVM会破坏规则2，按照整形（int），短整型（short），字节型（byte），引用类型（reference）的顺序，向未填满的空间填充。</p><p>最后计算引用类型字段的实际大小：<code>&quot;Xiaoming&quot;</code>，按字符串对象的字段进行计算，对象头12字节，hash字段4字节，char[] 4字节，共12+4+4+4(padding) = 24字节，其中char[]又是引用类型，且是数组类型，其大小为：对象头12+4(<code>length</code>) + 9(<code>arrLength</code>) * 2(<code>char</code>) +4(<code>padding</code>) = 40字节。</p></li></ul><p><strong>所以综上所述，一个Person对象及其包含对象总共占用内存的大小为104(40+24+40)字节。</strong></p><p>关于指针压缩</p><blockquote><p>一个比较明显的问题是，在64位机器上，如果开启了指针压缩后，则引用只占用4个字节，4字节的最大寻址空间为2^32=4GB, 那么如何保证能满足寻址空间大于4G的需求呢？</p><p>开启指针压缩后，实际上会压缩的对象包括：每个Class的属性指针(静态成员变量)及每个引用类型的字段(包括数组)指针，而本地变量，堆栈元素，入参，返回值，NULL这些指针不会被压缩。在开启指针压缩后，如前文源码所述，<code>markWord</code>中的存储指针将是<code>_compressed_klass</code>，对应的类型是<code>narrowOop</code>，不再是<code>wideKlassOop</code>了，有什么区别呢？</p><p><code>wideKlassOop</code>和<code>narrowOop</code>都指向<code>InstanceKlass</code>对象，其中<code>narrowOop</code>指向的是经过压缩的对象。简单来说，<code>wideKlassOop</code>可以达到整个寻址空间。而<code>narrowOop</code>虽然达不到整个寻址空间，但它面对也不再是个单纯的<code>byte</code>地址，而是一个<code>object</code>，也就是说使用<code>narrowOop</code>后，压缩后的这4个字节表示的4GB实际上是4G个对象的指针，大概是32GB。JVM会对对应的指针对象进行解码, JDK源码中，oop.hpp源码文件中定义了抽象的编解码方法，用于将<code>narrowOop</code>解码为一个正常的引用指针，或将一下正常的引用指针编码为<code>narrowOop</code>：</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Decode an oop pointer from a narrowOop if compressed.</span></span><br><span class="line"><span class="comment">// These are overloaded for oop and narrowOop as are the other functions</span></span><br><span class="line"><span class="comment">// below so that they can be called in template functions.</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> oop <span class="title">decode_heap_oop_not_null</span><span class="params">(oop v)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> oop <span class="title">decode_heap_oop_not_null</span><span class="params">(narrowOop v)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> oop <span class="title">decode_heap_oop</span><span class="params">(oop v)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> oop <span class="title">decode_heap_oop</span><span class="params">(narrowOop v)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Encode an oop pointer to a narrow oop.  The or_null versions accept</span></span><br><span class="line"><span class="comment">// null oop pointer, others do not in order to eliminate the</span></span><br><span class="line"><span class="comment">// null checking branches.</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> narrowOop <span class="title">encode_heap_oop_not_null</span><span class="params">(oop v)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> narrowOop <span class="title">encode_heap_oop</span><span class="params">(oop v)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="对齐填充"><a href="#对齐填充" class="headerlink" title="对齐填充"></a>对齐填充</h3><p>对齐填充是底层CPU数据总线读取内存数据时的要求，例如，通常CPU按照字单位读取，如果一个完整的数据体不需要对齐，那么在内存中存储时，其地址有极大可能横跨两个字，例如某数据块地址未对齐，存储为1-4，而<code>cpu</code>按字读取，需要把0-3字块读取出来，再把4-7字块读出来，最后合并舍弃掉多余的部分。这种操作会很多很多，且很频繁，但如果进行了对齐，则一次性即可取出目标数据，将会大大节省<code>cpu</code>资源。</p><p>在<code>hotSpot</code>虚拟机中，默认的对齐位数是8，与<code>cpu</code>架构<strong>无关</strong>，如下代码中的<code>objectAlignment</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Try to get the object alignment (the default seems to be 8 on Hotspot, </span></span><br><span class="line"><span class="comment">// regardless of the architecture).</span></span><br><span class="line"><span class="keyword">int</span> objectAlignment = <span class="number">8</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">final</span> Class&lt;?&gt; beanClazz = Class.forName(<span class="string">&quot;com.sun.management.HotSpotDiagnosticMXBean&quot;</span>);</span><br><span class="line">  <span class="keyword">final</span> Object hotSpotBean = ManagementFactory.newPlatformMXBeanProxy(</span><br><span class="line">    ManagementFactory.getPlatformMBeanServer(),</span><br><span class="line">    <span class="string">&quot;com.sun.management:type=HotSpotDiagnostic&quot;</span>,</span><br><span class="line">    beanClazz</span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">final</span> Method getVMOptionMethod = beanClazz.getMethod(<span class="string">&quot;getVMOption&quot;</span>, String.class);</span><br><span class="line">  <span class="keyword">final</span> Object vmOption = getVMOptionMethod.invoke(hotSpotBean, <span class="string">&quot;ObjectAlignmentInBytes&quot;</span>);</span><br><span class="line">  objectAlignment = Integer.parseInt(</span><br><span class="line">      vmOption.getClass().getMethod(<span class="string">&quot;getValue&quot;</span>).invoke(vmOption).toString()</span><br><span class="line">  );</span><br><span class="line">  supportedFeatures.add(JvmFeature.OBJECT_ALIGNMENT);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">  <span class="comment">// Ignore.</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">NUM_BYTES_OBJECT_ALIGNMENT = objectAlignment;</span><br></pre></td></tr></table></figure><p>可以看出，通过<code>HotSpotDiagnosticMXBean.getVMOption(&quot;ObjectAlignmentBytes&quot;).getValue()</code>方法可以拿到当前<code>JVM</code>环境下的对齐位数。</p><p>注意，这里的<code>HotSpotDiagnosticMXBean</code>是<code>JVM</code>提供的<code>JMX</code>中一种可被管理的资源，即<code>HotSpot</code>信息资源。</p><hr><h2 id="对象的大小的计算"><a href="#对象的大小的计算" class="headerlink" title="对象的大小的计算"></a>对象的大小的计算</h2><p>关于对象占用内存的大小计算，目前网上也有几种方法，整理如下：</p><h3 id="Instrumentation"><a href="#Instrumentation" class="headerlink" title="Instrumentation"></a>Instrumentation</h3><p>使用<code>java.lang.instrument.Instrumentation.getObjectSize()</code>方法，可以很方便的计算任何一个运行时对象的大小，返回该对象本身及其间接引用的对象在内存中的大小。不过，这个类的唯一实现类<code>InstrumentationImpl</code>的构造方法是私有的，在创建时，需要依赖一个<code>nativeAgent</code>，和运行环境所支持的一些预定义类信息，我们在代码中无法直接实例化它，需要在JVM启动时，通过指定代理的方式，让JVM来实例化它。</p><p>具体来讲，就是需要声明一个<code>premain</code>方法，它和main方法的方法签名有点相似，只不过方法名叫<code>“premain”</code>，同时方法参数也不一样，它接收一个<code>String</code>类型和<code>instrumentation</code>参数，而<code>String</code>参数实际上和<code>String[]</code>是一样的，只不过用<code>String</code>统一来表达的。在<code>premain</code>函数中，将<code>instrumentation</code>参数赋给一个静态变量，其它地方就可以使用了。如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectSizeTool</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Instrumentation instrumentation;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">premain</span><span class="params">(String args, Instrumentation inst)</span> </span>&#123;</span><br><span class="line">    instrumentation = inst;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">getObjectSize</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> instrumentation.getObjectSize(o);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  从方法名可以猜到，这里的<code>premain</code>是要先于<code>main</code>执行的，而先于<code>main</code>执行，这个动作只能由<code>JVM</code>来完成了。即在<code>JVM</code>启动时，先启动一个<code>agent</code>，操作如下：</p><p>  假设<code>main</code>方法所在的jar包为：<code>A.jar</code>，<code>premain</code>方法所在的jar包为<code>B.jar</code>。注意为<code>main</code>所在的代码打包时，和其它工具类打包一样，需要声明一个<code>MANIFEST.MF</code>清单文件，如下所求：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Manifest-Version: 1.0</span><br><span class="line">Main-Class: com.xfs.Main</span><br><span class="line">Premain-Class: com.xfs.ObjectSizeTool</span><br></pre></td></tr></table></figure><p>然后执行Java命令执行jar文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -javaagent:B.jar -jar A.jar</span><br></pre></td></tr></table></figure><p>点评：这种方法的优点是编码简单，缺点就是必须启动一个<code>javaagent</code>，因此要求修改Java的启动参数。</p><h3 id="Unsafe"><a href="#Unsafe" class="headerlink" title="Unsafe"></a>Unsafe</h3><p><code>java</code>中的<code>sun.misc.Unsafe</code>类，有一个<code>objectFieldOffset(Field f)</code>方法，表示获取指定字段在所在实例中的起始地址偏移量，如此可以计算出指定的对象中每个字段的偏移量，值为最大的那个就是最后一个字段的首地址，加上该字段的实际大小，就能知道该对象整体的大小。如现有一Person类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">boolean</span> married;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>假设该类的一个实例<code>p</code>，通过<code>Unsafe.objectFieldOffset()</code>方法计算到得<code>age/birthday/married</code>三个字段的偏移量分别是16，21,  17，则表明p1对象中的最后一个字段是name，它的首地址是21，由于它是一个引用，所以它的大小默认为4(开启指针压缩)，则该对象本身的大小就是21+4+ 7= 32字节。其中7表示padding，即为了使结果变成8的整数倍而做的padding </p><p>但上述计算，只是计算了对象本身的大小，并没有计算其所引用的引用类型的最终大小，这就需要手工写代码进行递归计算了。</p><p>点评：使用<code>Unsafe</code>可以完全不care对象内的复杂构成，可以很精确的计算出对象头的大小(即第一个字段的偏移)及每个字段的偏移。缺点是<code>Unsafe</code>通常禁止开发者直接使用，需要通过反射获取其实例，另外，最后一个字段的大小需要手工计算。其次需要手工写代码递归计算才能得到对象及其所引用的对象的综合大小，相对比较麻烦。</p><h3 id="RamUsageEstimator"><a href="#RamUsageEstimator" class="headerlink" title="RamUsageEstimator"></a>RamUsageEstimator</h3><p> <code>lucene</code>提供的专门用于计算堆内存占用大小的工具类：RamUsageEstimator，maven坐标：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.apache.lucene&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;lucene-core&lt;&#x2F;artifactId&gt;</span><br><span class="line">      &lt;version&gt;8.8.0&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><p><code>RamUsageEstimator</code>就是根据Java对象在堆内存中的存储格式，通过计算Java对象头、实例数据、引用等的大小，相加而得，如果有引用，还能递归计算引用对象的大小。<code>RamUsageEstimator</code>的源码并不多，几百行，清晰可读。这里不进行一一解读了。</p><p>它在初始化的时候会根据当前JVM运行环境、CPU架构、运行参数、是否开启指针压缩、JDK版本等综合计算对象头的大小，而实例数据部分则按照Java基础数据类型的标准大小进行计算。思路简单，同时也在一定程度上反映出了Java对象格式的奥秘！</p><p>常用方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment">* Estimates a &quot;shallow&quot; memory usage of the given object. For arrays, this will be the</span></span><br><span class="line"><span class="comment">* memory taken by array storage (no subreferences will be followed). For objects, this</span></span><br><span class="line"><span class="comment">* will be the memory taken by the fields.</span></span><br><span class="line"><span class="comment">* </span></span><br><span class="line"><span class="comment">* JVM object alignments are also applied.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">long</span> RamUsageEstimator.shallowSizeOf(Object obj)</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Best effort attempt to estimate the size in bytes of an undetermined object. Known types</span></span><br><span class="line"><span class="comment">* will be estimated according to their formulas, and all other object sizes will be estimated</span></span><br><span class="line"><span class="comment">* as &#123;<span class="doctag">@link</span> #UNKNOWN_DEFAULT_RAM_BYTES_USED&#125;.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">sizeOfObject</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> sizeOfObject(o, <span class="number">0</span>, UNKNOWN_DEFAULT_RAM_BYTES_USED);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>sizeOfObject</code>方法最终会调用如下方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">sizeOfObject</span><span class="params">(Object o, <span class="keyword">int</span> depth, <span class="keyword">long</span> defSize)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">long</span> size;</span><br><span class="line">    <span class="keyword">if</span> (o <span class="keyword">instanceof</span> Accountable) &#123;</span><br><span class="line">      size = ((Accountable)o).ramBytesUsed();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (o <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">      size = sizeOf((String)o);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (o <span class="keyword">instanceof</span> <span class="keyword">boolean</span>[]) &#123;</span><br><span class="line">      size = sizeOf((<span class="keyword">boolean</span>[])o);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (o <span class="keyword">instanceof</span> <span class="keyword">byte</span>[]) &#123;</span><br><span class="line">      size = sizeOf((<span class="keyword">byte</span>[])o);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (o <span class="keyword">instanceof</span> <span class="keyword">char</span>[]) &#123;</span><br><span class="line">      size = sizeOf((<span class="keyword">char</span>[])o);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (o <span class="keyword">instanceof</span> <span class="keyword">double</span>[]) &#123;</span><br><span class="line">      size = sizeOf((<span class="keyword">double</span>[])o);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (o <span class="keyword">instanceof</span> <span class="keyword">float</span>[]) &#123;</span><br><span class="line">      size = sizeOf((<span class="keyword">float</span>[])o);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (o <span class="keyword">instanceof</span> <span class="keyword">int</span>[]) &#123;</span><br><span class="line">      size = sizeOf((<span class="keyword">int</span>[])o);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (o <span class="keyword">instanceof</span> Long) &#123;</span><br><span class="line">      size = sizeOf((Long)o);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (o <span class="keyword">instanceof</span> <span class="keyword">long</span>[]) &#123;</span><br><span class="line">      size = sizeOf((<span class="keyword">long</span>[])o);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (o <span class="keyword">instanceof</span> <span class="keyword">short</span>[]) &#123;</span><br><span class="line">      size = sizeOf((<span class="keyword">short</span>[])o);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (o <span class="keyword">instanceof</span> String[]) &#123;</span><br><span class="line">      size = sizeOf((String[]) o);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (o <span class="keyword">instanceof</span> Query) &#123;</span><br><span class="line">      size = sizeOf((Query)o, defSize);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (o <span class="keyword">instanceof</span> Map) &#123;</span><br><span class="line">      size = sizeOfMap((Map) o, ++depth, defSize);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (o <span class="keyword">instanceof</span> Collection) &#123;</span><br><span class="line">      size = sizeOfCollection((Collection)o, ++depth, defSize);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (defSize &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        size = defSize;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        size = shallowSizeOf(o);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> size;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>可以看到，支持的对象类型有限，不支持直接获取到一个任意对象及其关联对象所占用空间的总大小。</p><p>使用该第三方工具比较简单直接，主要依靠<code>JVM</code>本身环境、参数及CPU架构计算头信息，再依据数据类型的标准计算实例字段大小，计算速度很快，另外使用较方便。如果非要说这种方式有什么缺点的话，那就是这种方式计算所得的对象头大小是基于<code>JVM</code>声明规范的，并不是通过运行时内存地址计算而得，<strong>存在与实际大小不符的这种可能性。</strong></p><h3 id="JOL-CORE"><a href="#JOL-CORE" class="headerlink" title="JOL-CORE"></a>JOL-CORE</h3><p>使用<code>openjdk</code>中的<code>jol</code>包可以比较直观的看到对象结构和计算对象的大小。</p><p>引入<code>pom</code>依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.openjdk.jol<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jol-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>一些常用方法</strong></p><p>1、查看对象内部信息：<code>ClassLayout.parseInstance(obj).toPrintable()</code></p><p>结果举例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">com.xfs.blog.DemoObject object internals:</span><br><span class="line"> OFFSET  SIZE                TYPE DESCRIPTION                               VALUE</span><br><span class="line">      0     4                     (object header)                           01 00 00 00 (00000001 00000000 00000000 00000000) (1)</span><br><span class="line">      4     4                     (object header)                           00 00 00 00 (00000000 00000000 00000000 00000000) (0)</span><br><span class="line">      8     4                     (object header)                           92 c3 00 20 (10010010 11000011 00000000 00100000) (536920978)</span><br><span class="line">     12     4                 int DemoObject.age                            1</span><br><span class="line">     16     4    java.lang.String DemoObject.name                           (object)</span><br><span class="line">     20     4   java.lang.Boolean DemoObject.vip                            false</span><br><span class="line">Instance size: 24 bytes</span><br><span class="line">Space losses: 0 bytes internal + 0 bytes external &#x3D; 0 bytes total</span><br></pre></td></tr></table></figure><p>2、查看对象外部信息：包括引用的对象：<code>GraphLayout.parseInstance(obj).toPrintable()</code></p><p>结果举例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">com.xfs.blog.DemoObject@307f6b8cd object externals:</span><br><span class="line">          ADDRESS       SIZE TYPE                    PATH                           VALUE</span><br><span class="line">         d5c79e30         16 java.lang.Boolean       .vip                           false</span><br><span class="line">         d5c79e40    2197792 (something else)        (somewhere else)               (something else)</span><br><span class="line">         d5e92760         24 com.xfs.blog.DemoObject                                (object)</span><br><span class="line">         d5e92778         24 java.lang.String        .name                          (object)</span><br><span class="line">         d5e92790         24 [C                      .name.value                    [x, f, s]</span><br></pre></td></tr></table></figure><p>3、查看对象占用空间总大小：<code>GraphLayout.parseInstance(obj).totalSize()</code></p><p>4、查看对象在堆内占用空间大小：<code>ClassLayout.parseInstance(demoObject).instanceSize()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DemoObject demoObject = <span class="keyword">new</span> DemoObject(<span class="number">1</span>, <span class="string">&quot;xfs&quot;</span>, <span class="keyword">false</span>);</span><br><span class="line"><span class="keyword">long</span> instanceSize = ClassLayout.parseInstance(demoObject).instanceSize();</span><br><span class="line"><span class="keyword">long</span> totalSize = GraphLayout.parseInstance(demoObject).totalSize();</span><br><span class="line">System.out.println(<span class="string">&quot; instanceSize =====&gt; &quot;</span> + instanceSize);</span><br><span class="line">System.out.println(<span class="string">&quot;    totalSize =====&gt; &quot;</span> + totalSize);</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">instanceSize &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt; 24</span><br><span class="line">   totalSize &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt; 88</span><br></pre></td></tr></table></figure><h2 id="实验验证"><a href="#实验验证" class="headerlink" title="实验验证"></a>实验验证</h2><p>接下来通过两个简单的例子来对上诉理论做一个验证，也加深一下印象。</p><p><strong>约定在前：使用64位机器，采用指针压缩，</strong></p><p>1、一个简单的String对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String hello = <span class="string">&quot;hello&quot;</span>;</span><br></pre></td></tr></table></figure><p>hello占用了多少空间呢？</p><p>在写代码计算之前不妨先根据规则来手动计算一下。</p><p>首先需要知道，String这个类中，只有两个属性：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** The value is used for character storage. */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">char</span> value[];</span><br><span class="line"><span class="comment">/** Cache the hash code for the string */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> hash; <span class="comment">// Default to 0</span></span><br></pre></td></tr></table></figure><p>一个基本数据类型的hash，一个存储数据的char[]。</p><p>hello变量所指向的对象的对象头头的大小为：8(mark word)+4(class pointer) = 12。</p><p>接下来计算实例数据的大小：</p><p>hash为int类型，占4个字节，char[]是个数组对象，引用类型占4字节。</p><p>所以hello的大小为： 12(object header) + 4(hash) +  4(char[] :: ref) + 4(padding) = 24字节</p><p>总的占用空间大小为 hello指向对象的大小加上内部char[]对象的大小。计算char[]的大小：</p><p>8(mark word) + 4(class pointer) + 4 (array length :: int )= 16</p><p>每一个char 占2字节，char[]实例数据的大小为 2 * 5 = 10字节。char[]对象的总大小为 16(object header) + 10(instance data) + 6(padding)= 32字节。</p><p><strong>所以占用空间总的大小为：  24  +  32（char[]）= 56字节。</strong></p><p>接下来写demo验证自己的计算结果是否正确：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">String hello = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="keyword">long</span> instanceSize = ClassLayout.parseInstance(hello).instanceSize();</span><br><span class="line"><span class="keyword">long</span> totalSize = GraphLayout.parseInstance(hello).totalSize();</span><br><span class="line">System.out.println(<span class="string">&quot;jol-core instanceSize =====&gt; &quot;</span> + instanceSize);</span><br><span class="line">System.out.println(<span class="string">&quot;jol-core    totalSize =====&gt; &quot;</span> + totalSize);</span><br><span class="line">System.out.println(<span class="string">&quot;----------------------------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> sizeOf = RamUsageEstimator.sizeOfObject(hello);</span><br><span class="line"><span class="keyword">long</span> shallowSizeOf = RamUsageEstimator.shallowSizeOf(hello);</span><br><span class="line">System.out.println(<span class="string">&quot;RamUsageEstimator        sizeOf =====&gt; &quot;</span> + instanceSize);</span><br><span class="line">System.out.println(<span class="string">&quot;RamUsageEstimator shallowSizeOf =====&gt; &quot;</span> + totalSize);</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">jol-core instanceSize &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt; 24</span><br><span class="line">jol-core    totalSize &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt; 56</span><br><span class="line">----------------------------------------------</span><br><span class="line">RamUsageEstimator        sizeOf &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt; 56</span><br><span class="line">RamUsageEstimator shallowSizeOf &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt; 24</span><br></pre></td></tr></table></figure><p>结果符合预期。</p><p>再使用<code>jol-core</code>中提供的工具类查看对象结构：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(ClassLayout.parseInstance(hello).toPrintable());</span><br><span class="line">System.out.println(<span class="string">&quot;----------------------------------------------&quot;</span>);</span><br><span class="line">System.out.println(GraphLayout.parseInstance(hello).toPrintable());</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">java.lang.String object internals:</span><br><span class="line"> OFFSET  SIZE     TYPE DESCRIPTION                               VALUE</span><br><span class="line">      0     4          (object header)                           01 f2 f8 fa (00000001 11110010 11111000 11111010) (-84348415)</span><br><span class="line">      4     4          (object header)                           23 00 00 00 (00100011 00000000 00000000 00000000) (35)</span><br><span class="line">      8     4          (object header)                           da 02 00 20 (11011010 00000010 00000000 00100000) (536871642)</span><br><span class="line">     12     4   char[] String.value                              [h, e, l, l, o]</span><br><span class="line">     16     4      int String.hash                               0</span><br><span class="line">     20     4          (loss due to the next object alignment)</span><br><span class="line">Instance size: 24 bytes</span><br><span class="line">Space losses: 0 bytes internal + 4 bytes external &#x3D; 4 bytes total</span><br><span class="line"></span><br><span class="line">----------------------------------------------</span><br><span class="line">java.lang.String@23faf8f2d object externals:</span><br><span class="line">          ADDRESS       SIZE TYPE             PATH                           VALUE</span><br><span class="line">         d5e90e18         24 java.lang.String                                (object)</span><br><span class="line">         d5e90e30         32 [C               .value                         [h, e, l, l, o]</span><br></pre></td></tr></table></figure><p>可以看到与推算结果吻合。</p><p>2、一个简单的自定义对象</p><p>定义一个简单的类如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoObject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> vip;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DemoObject</span><span class="params">(<span class="keyword">int</span> age, String name, <span class="keyword">boolean</span> vip)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.vip = vip;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生成一个简单对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DemoObject demoObject = <span class="keyword">new</span> DemoObject(<span class="number">1</span>, <span class="string">&quot;xfs&quot;</span>, <span class="keyword">false</span>);</span><br></pre></td></tr></table></figure><p>计算<code>demoObject</code>所指对象的大小计算：</p><p>8(mark word) + 4(class pointer) + 4(age :: int) + 1(vip :: boolean) + 4(name :: ref) + 3(padding) = 24字节。</p><p>占用空间总大小计算：</p><p>“xfs”对象的大小为：12 (object header)+ 4 (hash :: int)+ 4(char[] :: ref) + 4(padding) = 24;</p><p>“xfs”内部char[]对象的大小为 16 (object header)+ 6 (2*3)+  2(padding) = 24;</p><p>24 (demoObject) + 24(xfs) + 24(char[]) = 72字节</p><p>测试代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">DemoObject demoObject = <span class="keyword">new</span> DemoObject(<span class="number">1</span>, <span class="string">&quot;xfs&quot;</span>, <span class="keyword">false</span>);</span><br><span class="line"><span class="keyword">long</span> instanceSize = ClassLayout.parseInstance(demoObject).instanceSize();</span><br><span class="line"><span class="keyword">long</span> totalSize = GraphLayout.parseInstance(demoObject).totalSize();</span><br><span class="line">System.out.println(<span class="string">&quot;jol-core instanceSize =====&gt; &quot;</span> + instanceSize);</span><br><span class="line">System.out.println(<span class="string">&quot;jol-core    totalSize =====&gt; &quot;</span> + totalSize);</span><br><span class="line">System.out.println(<span class="string">&quot;----------------------------------------------&quot;</span>);</span><br><span class="line"><span class="keyword">long</span> sizeOf = RamUsageEstimator.sizeOfObject(demoObject);</span><br><span class="line"><span class="keyword">long</span> shallowSizeOf = RamUsageEstimator.shallowSizeOf(demoObject);</span><br><span class="line">System.out.println(<span class="string">&quot;RamUsageEstimator        sizeOf =====&gt; &quot;</span> + instanceSize);</span><br><span class="line">System.out.println(<span class="string">&quot;RamUsageEstimator shallowSizeOf =====&gt; &quot;</span> + totalSize);</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">jol-core instanceSize &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt; 24</span><br><span class="line">jol-core    totalSize &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt; 72</span><br><span class="line">----------------------------------------------</span><br><span class="line">RamUsageEstimator        sizeOf &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt; 256   &#x2F;&#x2F; 这个是程序内部兜底值，不是真的大小，RamUsageEstimator不支持直接获取对象及关联对象总大小</span><br><span class="line">RamUsageEstimator shallowSizeOf &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt; 24</span><br></pre></td></tr></table></figure><p>与计算结果相符。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>经过上诉三个小节，知道了对象在内存中的存储结构，如何来进行对象本身大小的计算以及对象本身及其关联对象所占用空间总大小的计算。</p><p>因为在工作中遇到了需要考虑对象内存占用的问题，所以去网上查阅了一些资料进行学习整理，本文是参考了网上的很多博客，查阅了<code>openjdk</code>的源码，加入了自己的理解以及进行了实验验证。</p><p>在本文中没有对<code>hostspot jvm</code>中的<code>oop-klass</code>二分模型进行阐述，有需要可以自行查阅。</p><h2 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h2><p>本文参考借鉴了如下的一些博客，除了如下这些，还有一些其他的，看完之后也有收获，但是没有记下来地址，现在也不太好找了。</p><p><a href="https://www.jianshu.com/p/9d729c9c94c4">https://www.jianshu.com/p/9d729c9c94c4</a></p><p><a href="https://blog.csdn.net/jinxinxin1314/article/details/106170881">https://blog.csdn.net/jinxinxin1314/article/details/106170881</a></p><p><a href="https://www.sohu.com/a/306845134_505779">https://www.sohu.com/a/306845134_505779</a></p><p><a href="https://mp.weixin.qq.com/s/OmSDE9r9pJATsedHGvn0kw">https://mp.weixin.qq.com/s/OmSDE9r9pJATsedHGvn0kw</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一篇博客</title>
      <link href="2019/12/18/talk/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
      <url>2019/12/18/talk/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>今天是公元 <code>2019-12-18</code>日，星期三，天气晴。使用<code>hexo</code> + <code>github</code>重新搭建了一个静态博客系统，之前也有搭建过，由于图床的原因，之前写的博客有很多图片都看不到了，恰好也想重新换一个主题，就再重新整理一下了。搭建这个博客的目的是为了督促自己的学习，多写技术博客，同时也会在博客上记录一些生活上和工作上的事情。</p>]]></content>
      
      
      <categories>
          
          <category> Demo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Demo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
