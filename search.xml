<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>排序算法总结</title>
      <link href="/2019/12/23/algorithm/Sort/"/>
      <url>/2019/12/23/algorithm/Sort/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> Sort </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> Sort </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单例模式</title>
      <link href="/2019/12/23/gof23/Singleton/"/>
      <url>/2019/12/23/gof23/Singleton/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>整理一些常用的设计模式，单例模式是在 <code>GOF</code>的23种设计模式里较为简单的一种，先从简单的开始吧。</p><h2 id="什么是单例模式"><a href="#什么是单例模式" class="headerlink" title="什么是单例模式"></a>什么是单例模式</h2><p>首先来了解一下单例模式的概念和定义：</p><blockquote><p>来自百度百科：<br>单例模式，是一种常用的软件设计模式。在它的核心结构中只包含一个被称为单例的特殊类。通过单例模式可以保证系统中，应用该模式的类一个类只有一个实例。即一个类只有一个对象实例。</p></blockquote><p>许多时候整个系统只需要拥有一个的全局对象，这样有利于我们协调系统整体的行为。比如在某个服务器程序中，该服务器的配置信息存放在一个文件中，这些配置数据由一个单例对象统一读取，然后服务进程中的其他对象再通过这个单例对象获取这些配置信息。这种方式简化了在复杂环境下的配置管理。</p><p>在我们日常的工作中，很多对象通常占用非常重要的系统资源，比如：IO处理，数据库操作等，那我们必须要限制这些对象只有且始终使用一个公用的实例，即单例。</p><p>一些场景举例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1、外部资源：每台计算机有若干个打印机，但只能有一个PrinterSpooler，以避免两个打印作业同时输出到打印机。内部资源：大多数软件都有一个（或多个）属性文件存放系统配置，这样的系统应该有一个对象管理这些属性文件。</span><br><span class="line">2、Windows的Task Manager（任务管理器）就是很典型的单例模式（这个很熟悉吧），想想看，是不是呢，你能打开两个windows task manager吗？ 不信你自己试试看哦~</span><br><span class="line">3、windows的RecycleBin（回收站）也是典型的单例应用。在整个系统运行过程中，回收站一直维护着仅有的一个实例。</span><br><span class="line">4、网站的计数器，一般也是采用单例模式实现，否则难以同步。</span><br><span class="line">5、应用程序的日志应用，一般都何用单例模式实现，这一般是由于共享的日志文件一直处于打开状态，因为只能有一个实例去操作，否则内容不好追加。</span><br><span class="line">6、Web应用的配置对象的读取，一般也应用单例模式，这个是由于配置文件是共享的资源。</span><br><span class="line">7、数据库连接池的设计一般也是采用单例模式，因为数据库连接是一种数据库资源。数据库软件系统中使用数据库连接池，主要是节省打开或者关闭数据库连接所引起的效率损耗，这种效率上的损耗还是非常昂贵的，因为何用单例模式来维护，就可以大大降低这种损耗。</span><br><span class="line">8、多线程的线程池的设计一般也是采用单例模式，这是由于线程池要方便对池中的线程进行控制。</span><br><span class="line">9、操作系统的文件系统，也是大的单例模式实现的具体例子，一个操作系统只能有一个文件系统。</span><br></pre></td></tr></table></figure><p>单例模式的实现思路：</p><p>在Java中，确保一个类只有一个对象实例可以通过权限的修饰来实现。</p><ul><li><strong>构造函数私有化，</strong> 防止其他类生成唯一公用实例外的实例。</li><li>且单例类应该被定义为final，也就是说单例类不能被继承，因为如果允许继承那子类就都可以创建实例，违背了类唯一实例的初衷。</li><li>类中一个静态变量来保存单实例的引用。</li><li>一个共有的静态方法来获取单实例的引用。</li></ul><p>结构模型图：</p><p><img alt="单例模式结构模型" data-src="https://s2.ax1x.com/2019/05/13/E5WaD0.jpg" class="lazyload"></p><p><strong>时序图</strong></p><p><img alt data-src="https://s2.ax1x.com/2019/05/13/E5WD5F.jpg" class="lazyload"></p><hr><h2 id="单例模式的实现"><a href="#单例模式的实现" class="headerlink" title="单例模式的实现"></a>单例模式的实现</h2><h3 id="单例模式-饿汉式"><a href="#单例模式-饿汉式" class="headerlink" title="单例模式  -  饿汉式"></a>单例模式  -  饿汉式</h3><p>单例模式的饿汉模式指全局的单例实例在第一次被使用时构建。<br>具体实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Desc: 单例模式的饿汉模式实现</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建全局静态变量，保证只有一个实例</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">volatile</span> Singleton INSTANCE = <span class="keyword">new</span> Singleton();</span><br><span class="line">    <span class="comment">//构造私有</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton1 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在饿汉模式实现方式中，程序的主要特点是：</p><ol><li>私有构造方法</li><li>私有静态属性，维护自身实例</li><li>静态服务方法，获取实例</li><li>初始化时候创建，消耗初始化系统资源</li></ol><h3 id="单例模式-懒汉式"><a href="#单例模式-懒汉式" class="headerlink" title="单例模式  -  懒汉式"></a>单例模式  -  懒汉式</h3><p>懒汉模式，也是最常用的形式，饿汉模式让程序在初始化时候进行加载，有时为了节约资源，我们需要在需要的时候进行加载，这时候我们可以使用懒汉模式。</p><p>懒汉式的实现有几种不同的方式，下面分别介绍。</p><h4 id="单例模式-懒汉式-普通"><a href="#单例模式-懒汉式-普通" class="headerlink" title="单例模式 - 懒汉式 - 普通"></a>单例模式 - 懒汉式 - 普通</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;    </span><br><span class="line">    <span class="comment">// 私有化自身类对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton INSTANCE;</span><br><span class="line">    <span class="comment">// 私有化构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="comment">// 提供公有静态方法获取实例</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(INSTANCE== <span class="keyword">null</span> ) &#123;</span><br><span class="line">            INSTANCE= <span class="keyword">new</span> Singleton();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="单例模式-懒汉式-同步锁"><a href="#单例模式-懒汉式-同步锁" class="headerlink" title="单例模式 - 懒汉式 - 同步锁"></a>单例模式 - 懒汉式 - 同步锁</h4><p>在多线程的环境中，简单的单例模式将会出现问题，试想在上面的懒汉模式中，如果多线程并发执行<code>getInstance()</code>，当线程A执行到：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSTANCE = <span class="keyword">new</span> Singleton();</span><br></pre></td></tr></table></figure><p>却还没有执行完毕时，线程B执行到<code>if(INSTANCE == null )</code>，此时就无法保证单例特性。<br>因此在多线程环境中，单例模式需要使用同步锁确保实现真正的单例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 私有化自身类对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton INSTANCE;</span><br><span class="line">    <span class="comment">// 私有化构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(INSTANCE == <span class="keyword">null</span> ) &#123;</span><br><span class="line">            INSTANCE = <span class="keyword">new</span> Singleton();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过在<code>getInstance()</code>方法上添加 <code>synchronized</code> 关键字可以解决多线程带来的问题。</p><h4 id="单例模式-懒汉式-双重校验锁"><a href="#单例模式-懒汉式-双重校验锁" class="headerlink" title="单例模式 - 懒汉式 - 双重校验锁"></a>单例模式 - 懒汉式 - 双重校验锁</h4><p>使用上面的（ 同步锁）方式在解决多线程问题时虽然可以达到确保线程安全的目的，但是使用了<code>synchronized</code>关键字之后在需要多次调用时，会让代码的执行效率大大降低。使用双重校验的方式可以是效率得到提升，具体实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 私有化自身类对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton INSTANCE;</span><br><span class="line">    <span class="comment">// 私有化构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (INSTANCE == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span>(Singleton<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">                INSTANCE = <span class="keyword">new</span> Singleton();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 <code>synchronized</code> 确保线程安全，在INSTANCE为 <code>null</code> 时才进行创建实例，但是仍然不能 保证在实例未创建完成时候有新的线程执行到 <code>if (SINGLETON == null)</code>；因此，仍然不够安全。修改 <code>getInstance（）</code>方法。具体实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 私有化自身类对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton INSTANCE;</span><br><span class="line">    <span class="comment">// 私有化构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="comment">// 使用双重校验锁确保线程安全的同时兼顾执行效率</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (INSTANCE == <span class="keyword">null</span>) &#123; <span class="comment">// 第一重检查</span></span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (INSTANCE == <span class="keyword">null</span>) &#123; <span class="comment">//第二重检查</span></span><br><span class="line">                    INSTANCE = <span class="keyword">new</span> Singleton();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看似完美的双检查模式，在理论上是没有问题的。但是在实际的情况里，有可能发生在没有构造完毕的情况下<code>INSTANCE</code>引用已经不是 <code>NULL</code>的情况，这时候如果有其他线程执行到<code>if (INSTANCE== null) { // 第一重检查</code> 则会获取到一个不正确的<code>INSTANCE</code>引用。这是由于<code>JVM</code> 的无序写入引起的。</p><p>幸好，在 <code>JDK1.5</code> 之后，提供了<code>volatile</code>关键字，用于确保被修饰的变量的读写不允许被控制。因此修改上面具体实现为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Desc:使用双重校验锁以及volatile关键字确保线程安全的同时兼顾执行效率</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 私有化自身类对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton INSTANCE;</span><br><span class="line">    <span class="comment">// 私有化构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="comment">// 使用双重校验锁确保线程安全的同时兼顾执行效率</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (INSTANCE == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (INSTANCE == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    INSTANCE = <span class="keyword">new</span> Singleton();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="单例模式-懒汉模式-内部类"><a href="#单例模式-懒汉模式-内部类" class="headerlink" title="单例模式 - 懒汉模式 - 内部类"></a>单例模式 - 懒汉模式 - 内部类</h4><p>除了使用上面的懒汉模式实现方式之外，在解决多线程问题中，《Effective Java》的作者给出了另外一种保证线程安全且兼顾效率的方式，利用了静态内部类以及类加载特性实现。静态内部类只有在调用时才会加载，而静态属性随着类的加载而加载，类的加载初始化只会有一次。因此保证了获取实例的唯一性。<br>具体实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Desc: 利用静态内部类实现线程安全且兼顾效率的单例模式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="comment">//静态内部类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHolder</span></span>&#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> Singleton INSTANCE = <span class="keyword">new</span> Singleton();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 私有化构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 公有方法获取实例</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonHolder.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果使用单例模式-饿汉模式，推荐<code>【单例模式 - 饿汉模式】。</code><br>如果使用单例模式-懒汉模式，推荐<code>【单例模式 - 懒汉模式 - 内部类 】。</code></p><h3 id="单例模式-枚举"><a href="#单例模式-枚举" class="headerlink" title="单例模式 - 枚举"></a>单例模式 - 枚举</h3><p>在枚举中，由于构造方法是私有的，所以枚举也可以用来实现单列模式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Singleton &#123;</span><br><span class="line">    INSTANCE;</span><br><span class="line"></span><br><span class="line">    Singleton() &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="单例模式的破坏"><a href="#单例模式的破坏" class="headerlink" title="单例模式的破坏"></a>单例模式的破坏</h2><p>单例模式在某些情况下也是可以被破坏的。可以使用反射或者反序列化的方式来进行单例模式的破坏。</p><h3 id="反射破坏单例模式"><a href="#反射破坏单例模式" class="headerlink" title="反射破坏单例模式"></a>反射破坏单例模式</h3><p>单例模式的构造器是私有的，所以外部不能再使用 new 来新建一个对象，只能通过单例类提供的静态方法来获取单例类的实例。但是反射是可以突破修饰符的限制的，所以我们还是可以通过反射来破解单例模式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Class clazz = Class.forName(<span class="string">"com.sxf.singleton.Singleton"</span>); </span><br><span class="line">Constructor con = clazz.getDeclaredConstructor(<span class="keyword">null</span>); <span class="comment">//获取无参构造函数</span></span><br><span class="line">con.setAccessible(<span class="keyword">true</span>);<span class="comment">// 设置private权限修饰符为可见,可以通过构造函数新建对象</span></span><br><span class="line">Singleton sin1 = (Singleton) con.newInstance();</span><br><span class="line">Singleton sin2 = (Singleton) con.newInstance();</span><br><span class="line">System.out.println(sin1 = sin2); <span class="comment">//false</span></span><br><span class="line">System.out.println(sin1);</span><br><span class="line">System.out.println(sin2);</span><br></pre></td></tr></table></figure><h3 id="反序列化破坏单例"><a href="#反序列化破坏单例" class="headerlink" title="反序列化破坏单例"></a>反序列化破坏单例</h3><p>如果我们的单列类实现了序列化(<code>Serializable</code>)的接口，我们可以通过反序列话来破坏单列模式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton INSTANCE = <span class="keyword">new</span> Singleton();  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过反序列化的方式来破坏单例模式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过反序列化的方式创建多个对象</span></span><br><span class="line">FileOutputStream fos= <span class="keyword">new</span> FileOutputStream(<span class="string">"d:/a.txt"</span>);</span><br><span class="line">ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(fos);</span><br><span class="line">oos.writeObject(s1);</span><br><span class="line">oos.close();</span><br><span class="line">fos.close();</span><br><span class="line">ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"d:/a.txt"</span>));</span><br><span class="line">Singleton s= (Singleton) ois.readObject();</span><br><span class="line">System.out.println(s);</span><br></pre></td></tr></table></figure><p>而为了防止反射和反序列化破坏单例模式，需要在单例模式中添加，具体以懒汉式为例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 单例模式：懒汉模式 测试反射和反序列化破解单例模式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 类加载时，不初始化对象（延时加载：资源利用率高）</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance != <span class="keyword">null</span>) &#123;   <span class="comment">//解决反射破坏单例</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// synchronized 防止并发量高的时候，出现多个对象</span></span><br><span class="line">    <span class="comment">// 方法同步，调用效率低，</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在反序列化时，直接调用这个方法，返回指定的对象，无需再新建一个对象</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Object <span class="title">readResolve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> GOF23 </category>
          
          <category> Singleton </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GOF23 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>The Size Of A Java Object</title>
      <link href="/2019/12/19/blogs/java/The-Size-Of-Java-Object/"/>
      <url>/2019/12/19/blogs/java/The-Size-Of-Java-Object/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>​       之前 一直没有关注一个<code>Java</code> 对象会占用多少内存，最近在工作中遇到这样的场景，需要考虑对象在内存中占用多少内存，所以整理一下有关<code>Java</code> 对象的相关知识，java对象的结构，是如何在内存中存储的，以及占用多少内存等相关的知识点。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Object object = <span class="keyword">new</span> Object()</span><br></pre></td></tr></table></figure><hr><h2 id="Java对象的结构"><a href="#Java对象的结构" class="headerlink" title="Java对象的结构"></a>Java对象的结构</h2><p>首先来了解一下<code>java</code>实例对象的结构是什么样子的。</p><p>在<code>HotSpot</code>虚拟机中,对象在内存中存储的布局可以分为3块区域：对象头（Header），实例数据（Instance Data）和对象填充（Padding）。</p><p><img alt data-src="https://i.loli.net/2019/12/21/hszlDCTvAnP2BFK.png" class="lazyload"></p><ul><li><p><strong>对象头</strong>：Hotspot虚拟机的对象头主要包括两部分数据：Mark Word（标记字段）、Class Pointer（类型指针）。数组长度（如果有的话）</p></li><li><p><strong>实例数据</strong>：对象真正存储的有效信息，存放类的属性数据信息，包括父类的属性信息。</p></li><li><p><strong>对齐填充</strong>：由于虚拟机要求 对象起始地址必须是8字节的整数倍。填充数据不是必须存在的，仅仅是为了字节对齐。</p></li></ul><h3 id="对象头"><a href="#对象头" class="headerlink" title="对象头"></a>对象头</h3><p>  对象头主要包括两部分数据：Mark Word（标记字段）、Class Pointer（类型指针），数组长度（如果有的话）</p><p>  <img alt data-src="https://i.loli.net/2019/12/21/vH9ROSwaY62WAns.png" class="lazyload"></p><p>  <strong>Mark Word</strong> ：用于存储对象自身的运行时数据，它是实现轻量级锁和偏向锁的关键。</p><p>  <strong>Class Pointer</strong>：是对象指向它的类元数据的指针，虚拟机通过这个指针来确定这个对象是哪个类的实例</p><p>  <strong>数组长度</strong>：只有当本对象是一个数组对象时才会有这个部分</p><p>参考<a href="https://github.com/openjdk-mirror/jdk7u-hotspot/tree/50bdefc3afe944ca74c3093e7448d6b889cd20d1/src" target="_blank" rel="noopener">OpenJDK中JVM源码</a>部分，对象头的C++定义如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">oopDesc</span> &#123;</span></span><br><span class="line">  <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">VMStructs</span>;</span></span><br><span class="line"> <span class="keyword">private</span>:</span><br><span class="line">  <span class="keyword">volatile</span> markOop  _mark;</span><br><span class="line">  <span class="keyword">union</span> _metadata &#123;</span><br><span class="line">    wideKlassOop    _klass;</span><br><span class="line">    narrowOop       _compressed_klass;</span><br><span class="line">  &#125; _metadata;</span><br></pre></td></tr></table></figure><blockquote><p>源码里的<code>_mark</code>和 <code>_metadata</code>两个字段就是对象头的定义，分别表示对象头中的两个基本组成部分，<code>_mark</code>用于存储<code>hash</code>、<code>gc</code>年龄、锁标记、偏向锁、自旋时间等，而<code>_metadata</code>是个共用体(union)，即<code>_klass</code>字段或<code>_compressed_klass</code>，存储当前对象到所在<code>class</code>的引用，而这个引用的要么由<code>_klass</code>来存储，要么由<code>_compressed_klass</code>来存储，其中<code>_compressed_klass</code>表示压缩的<code>class</code>指针，即当<code>JVM</code>开启了 <code>-XX:UseCompressedOops</code>选项时，就表示启用指针压缩选项，自然就使用<code>_commpressed_klass</code>来存储<code>class</code>引用了，否则使用<code>_klass</code>。</p><p>注意到，<code>_mark</code>的类型是 <code>markOop</code>，而<code>_metadata</code>的类型是<code>union</code>，<code>_metadata</code>内部两个字段：<code>_klass</code>和<code>_compressed_klass</code>类型分别为<code>wideKlassOop</code>和<code>narrowOop</code>，分别表示什么意思呢？这里顺便说一个<code>union</code>联合体的概念，这是在C++中的一种结构声明，类似<code>struct</code>，称作：“联合”，它是一种特殊的类，也是一种构造类型的数据结构。在一个“联合”内可以定义多种不同的数据类型， 一个被说明为该“联合”类型的变量中，允许装入该“联合”所定义的任何一种数据，这些数据共享同一段内存，已达到节省空间的目的。由此可见，刚刚所说的使用<code>-XX:UseCompressedOops</code>后，就自动使用<code>_metadata</code>中的<code>_compressed_klass</code>来作为指向当前对象的<code>class</code>引用，它的类型是<code>narrowOop</code>。可以看到，对象头中的两个字段的定义都包含了<code>“Oop”</code>字眼，不难猜出，这是一种在JVM层定义好的“类型”。</p></blockquote><p><strong>OOP-Klass模型</strong></p><blockquote><p>实际上，Java的面向对象在语言层是通过<code>java</code>的<code>class</code>定义实现的，而在<code>JVM</code>层，也有对应的实现，那就是<code>Oop</code>模型。所谓<code>Oop</code>模型，全称：<code>Ordinary Object Pointer</code>，即普通对象指针。<code>JVM</code>层用于定义<code>Java</code>对象模型及一些元数据格式的模型就是：<code>Oop</code>，可以认为是JVM层中的“类”。通过JDK源码可以看到，有很多模型定义的名称都是以<code>Oop</code>结尾：<code>arrayOop/markOop/instanceOop/methodOop/objectArrayOop</code>等。</p><p><code>HotSpot</code>是基于c++语言实现的，它最核心的地方是设计了两种模型,分别是<code>OOP</code>和<code>Klass</code>，称之为<code>OOP-Klass Model</code>,  其中<code>OOP</code>用来将指针对象化，比<code>C++</code>底层使用的”*”更好用，每一个类型的<code>OOP</code>都代表一个在<code>JVM</code>内部使用的特定对象的类型。而<code>Klass</code>则用来描述<code>JVM</code>层面中对象实例的具体类型，它是java实现语言层面类型的基础，或者说是对<code>java</code>语言层类型的<code>JVM</code>层描述。所以看到<code>openJDK</code>源码中的定义基本都以<code>Oop</code>或<code>Klass</code>结尾。</p><p>由上述定义可以简单的说，<code>Oop</code>就是<code>JVM</code>内部对象类型，而<code>Klass</code>就是<code>java</code>类在<code>JVM</code>中的映射。其中关于<code>Oop</code>和<code>Klass</code>体系，参考定义：<a href="https://github.com/openjdk-mirror/jdk7u-hotspot/blob/50bdefc3afe944ca74c3093e7448d6b889cd20d1/src/share/vm/oops/oop.hpp" target="_blank" rel="noopener">链接</a>；JVM中把我们上层可见的<code>Java</code>对象在底层实际上表示为两部分，分别是<code>oop</code>和<code>klass</code>，其中<code>oop</code>专注于表示对象的实例数据，不关心对象中的实例方法(包括继承、重载等)所对应的函数表。而<code>klass</code>则维护对象到<code>java class</code>及函数表的功能，它是<code>java class</code>及实现多态的基础。这里列举几个基础的<code>Oop</code>和<code>Klass</code></p></blockquote><p><strong><code>Oop</code>:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;定义了oops共同基类</span><br><span class="line">typedef class   oopDesc*                            oop;</span><br><span class="line">&#x2F;&#x2F;表示一个Java类型实例</span><br><span class="line">typedef class   instanceOopDesc*            instanceOop;</span><br><span class="line">&#x2F;&#x2F;表示一个Java方法</span><br><span class="line">typedef class   methodOopDesc*                    methodOop;</span><br><span class="line">&#x2F;&#x2F;定义了数组OOPS的抽象基类</span><br><span class="line">typedef class   arrayOopDesc*                    arrayOop;</span><br><span class="line">&#x2F;&#x2F;表示持有一个OOPS数组</span><br><span class="line">typedef class   objArrayOopDesc*            objArrayOop;</span><br><span class="line">&#x2F;&#x2F;表示容纳基本类型的数组</span><br><span class="line">typedef class   typeArrayOopDesc*            typeArrayOop;</span><br><span class="line">&#x2F;&#x2F;表示在Class文件中描述的常量池</span><br><span class="line">typedef class   constantPoolOopDesc*            constantPoolOop;</span><br><span class="line">&#x2F;&#x2F;常量池告诉缓存</span><br><span class="line">typedef class   constantPoolCacheOopDesc*   constantPoolCacheOop;</span><br><span class="line">&#x2F;&#x2F;描述一个与Java类对等的C++类</span><br><span class="line">typedef class   klassOopDesc*                    klassOop;</span><br><span class="line">&#x2F;&#x2F;表示对象头</span><br><span class="line">typedef class   markOopDesc*                    markOop;</span><br></pre></td></tr></table></figure><p><strong><code>Klass</code>:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;klassOop的一部分，用来描述语言层的类型</span><br><span class="line">class  Klass;</span><br><span class="line">&#x2F;&#x2F;在虚拟机层面描述一个Java类</span><br><span class="line">class   instanceKlass;</span><br><span class="line">&#x2F;&#x2F;专有instantKlass，表示java.lang.Class的Klass</span><br><span class="line">class     instanceMirrorKlass;</span><br><span class="line">&#x2F;&#x2F;表示methodOop的Klass</span><br><span class="line">class   methodKlass;</span><br><span class="line">&#x2F;&#x2F;最为klass链的端点，klassKlass的Klass就是它自身</span><br><span class="line">class   klassKlass;</span><br><span class="line">&#x2F;&#x2F;表示array类型的抽象基类</span><br><span class="line">class   arrayKlass;</span><br><span class="line">&#x2F;&#x2F;表示constantPoolOop的Klass</span><br><span class="line">class   constantPoolKlass;</span><br></pre></td></tr></table></figure><p><img alt="l56x1O.png" data-src="https://s2.ax1x.com/2020/01/11/l56x1O.png" class="lazyload"></p><blockquote><p>其中<code>OopDesc</code>是对象实例的基类(Java实例在VM中表现为<code>instanceOopDesc</code>)，<code>Klass</code>是类信息的基类(Java类在VM中表现为<code>instanceKlass)</code>，<code>klassKlass</code>则是对<code>Klass</code>本身的描述(Java类的class对象在VM中表现为<code>klassKlass</code>)。</p><p>有了对上述结构的认识，对应到内存中的存储区域，那么对象是怎么存储的，就了比较清楚的认识：对象实例(<code>instanceOopDesc</code>)保存在堆上，对象的元数据(<code>instanceKlass</code>)保存在方法区，对象的引用则保存在栈上。</p><p>因此，对<code>OOP-Klass Model</code>的讨论，可以用一句简洁明了的话来总结其意义：一个Java类在被VM加载时，JVM会为其在方法区创建一个<code>instanceKlass</code>，来表示该类的class信息。当我们在代码中基于此类用new创建一个新对象时，实际上JVM会去堆上创建一个<code>instanceOopDesc</code>对象，该对象保含对象头<code>markWord</code>和<code>klass</code>指针，<code>klass</code>指针指向方法区中的<code>instanceKlass</code>，<code>markWord</code>则保存一些锁、GC等相关的运行时数据。而在堆上创建的这个<code>instanceOopDesc</code>所对应的地址会被用来创建一个引用，赋给当前线程运行时栈上的一个变量。</p></blockquote><h4 id="Mark-Word"><a href="#Mark-Word" class="headerlink" title="Mark Word"></a>Mark Word</h4><p>Mark Word 用于存储对象自身的运行时数据，如哈希码（HashCode）、GC分代年龄、锁状态标志、线程持有的锁、偏向线程 ID、偏向时间戳等。</p><p>在32位的<code>HotSpot</code>虚拟机中，如果对象处于未被锁定的状态下，那么Mark Word的32bit空间里的25位用于存储对象哈希码，4bit用于存储对象分代年龄，2bit用于存储锁标志位，1bit固定为0，表示非偏向锁。其他状态如下图所示：</p><p><img alt data-src="https://i.loli.net/2019/12/23/PRTMbNB1LjgGpxF.png" class="lazyload"></p><blockquote><p>关于锁的部分之后会专门讲到，现在暂且不关注这部分。</p></blockquote><p>在64位的JVM中，MarkWord 又是怎么样的分布呢？</p><p>在64位的JVM中，Mark Word区域占用8字节，也就是64位。<br><img alt data-src="https://upload.cc/i1/2020/01/11/qlBWrX.png" class="lazyload"></p><p>关于Mark Word的结构，定义在markOop.hpp文件中，几行重要的注释，揭示了32位机器和64位机器下，对象头的格式：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">32</span> bits:</span><br><span class="line">--------</span><br><span class="line">hash:<span class="number">25</span> ------------&gt;| age:<span class="number">4</span>    biased_lock:<span class="number">1</span> lock:<span class="number">2</span> (normal object)</span><br><span class="line">JavaThread*:<span class="number">23</span> epoch:<span class="number">2</span> age:<span class="number">4</span>    biased_lock:<span class="number">1</span> lock:<span class="number">2</span> (biased object)</span><br><span class="line"><span class="built_in">size</span>:<span class="number">32</span> ------------------------------------------&gt;| (CMS <span class="built_in">free</span> block)</span><br><span class="line">PromotedObject*:<span class="number">29</span> ----------&gt;| promo_bits:<span class="number">3</span> -----&gt;| (CMS promoted object)</span><br><span class="line"> </span><br><span class="line"><span class="number">64</span> bits:</span><br><span class="line">--------</span><br><span class="line">unused:<span class="number">25</span> hash:<span class="number">31</span> --&gt;| unused:<span class="number">1</span>   age:<span class="number">4</span>    biased_lock:<span class="number">1</span> lock:<span class="number">2</span> (normal object)</span><br><span class="line">JavaThread*:<span class="number">54</span> epoch:<span class="number">2</span> unused:<span class="number">1</span>   age:<span class="number">4</span>    biased_lock:<span class="number">1</span> lock:<span class="number">2</span> (biased object)</span><br><span class="line">PromotedObject*:<span class="number">61</span> ---------------------&gt;| promo_bits:<span class="number">3</span> -----&gt;| (CMS promoted object)</span><br><span class="line"><span class="built_in">size</span>:<span class="number">64</span> -----------------------------------------------------&gt;| (CMS <span class="built_in">free</span> block)</span><br><span class="line"> </span><br><span class="line">unused:<span class="number">25</span> hash:<span class="number">31</span> --&gt;| cms_free:<span class="number">1</span> age:<span class="number">4</span>    biased_lock:<span class="number">1</span> lock:<span class="number">2</span> (COOPs &amp;&amp; normal object)</span><br><span class="line">JavaThread*:<span class="number">54</span> epoch:<span class="number">2</span> cms_free:<span class="number">1</span> age:<span class="number">4</span>    biased_lock:<span class="number">1</span> lock:<span class="number">2</span> (COOPs &amp;&amp; biased object)</span><br><span class="line">narrowOop:<span class="number">32</span> unused:<span class="number">24</span> cms_free:<span class="number">1</span> unused:<span class="number">4</span> promo_bits:<span class="number">3</span> -----&gt;| (COOPs &amp;&amp; CMS promoted object)</span><br><span class="line">unused:<span class="number">21</span> <span class="built_in">size</span>:<span class="number">35</span> --&gt;| cms_free:<span class="number">1</span> unused:<span class="number">7</span> ------------------&gt;| (COOPs &amp;&amp; CMS <span class="built_in">free</span> block)</span><br><span class="line">[ptr             | <span class="number">00</span>]  locked             ptr points to real header on <span class="built_in">stack</span></span><br><span class="line">[header      | <span class="number">0</span> | <span class="number">01</span>]  unlocked           regular object header</span><br><span class="line">[ptr             | <span class="number">10</span>]  <span class="function">monitor            inflated <span class="title">lock</span> <span class="params">(header is wapped out)</span></span></span><br><span class="line">[ptr             | 11]  marked             used by markSweep to mark an object</span><br></pre></td></tr></table></figure><ul><li><p><code>biased_lock</code>：对象是否启用偏向锁标记，只占1个二进制位。为1时表示对象启用偏向锁，为0时表示对象没有偏向锁。lock和biased_lock共同表示对象处于什么锁状态。</p></li><li><p><code>age</code>：4位的Java对象年龄。在GC中，如果对象在Survivor区复制一次，年龄增加1。当对象达到设定的阈值时，将会晋升到老年代。默认情况下，并行GC的年龄阈值为15，并发GC的年龄阈值为6。由于age只有4位，所以最大值为15，这就是<code>-XX:MaxTenuringThreshold</code>选项最大值为15的原因。</p></li><li><p><code>hash</code>：31位的对象标识<code>hashCode</code>，采用延迟加载技术。调用方法<code>System.identityHashCode()</code>计算，并会将结果写到该对象头中。当对象加锁后（偏向、轻量级、重量级），<code>MarkWord</code>的字节没有足够的空间保存<code>hashCode</code>，因此该值会移动到管程<code>Monitor</code>中。</p></li><li><p><code>JavaThread</code>：持有偏向锁的线程ID。</p></li><li><p><code>epoch</code>：偏向锁的时间戳。</p></li><li><p><code>ptr_to_lock_record</code>：轻量级锁状态下，指向栈中锁记录的指针。</p></li><li><p><code>ptr_to_heavyweight_monitor</code>：重量级锁状态下，指向对象监视器Monitor的指针。</p></li></ul><blockquote><p> 因为对象头信息只是对象运行时自身的一部分数据，相比实例数据部分，头部分属于与业务无关的额外存储成功。为了提高对象对堆空间的复用效率，<code>Mark Word</code>被设计成一个非固定的数据结构以便在极小的空间内存储尽量多的信息，它会根据对象的状态复用自己的存储空间。</p></blockquote><p>根据上面的描述，已经知道<code>Oop</code>基类中mark word结构的定义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">oopDesc</span> </span>&#123;</span><br><span class="line">  friend <span class="class"><span class="keyword">class</span> <span class="title">VMStructs</span></span>;</span><br><span class="line"> <span class="keyword">private</span>:</span><br><span class="line">  <span class="keyword">volatile</span> markOop  _mark;</span><br><span class="line">  union _metadata &#123;</span><br><span class="line">    wideKlassOop    _klass;</span><br><span class="line">    narrowOop       _compressed_klass;</span><br><span class="line">  &#125; _metadata;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中的mark word即上述 <code>_mark</code>字段，它在<code>JVM</code>中的表示类型是<code>markOop</code>, 部分关键源码如下所示，源码中展示了<code>markWord</code>各个字段的意义及占用大小(与机器字宽有关系)，如GC分代年龄、锁状态标记、哈希码、epoch、是否可偏向等信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">class markOopDesc: public oopDesc &#123;</span><br><span class="line"> <span class="keyword">private</span>:</span><br><span class="line">  <span class="comment">// Conversion</span></span><br><span class="line">  <span class="function">uintptr_t <span class="title">value</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> (uintptr_t) <span class="keyword">this</span>; &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="comment">// Constants</span></span><br><span class="line">  <span class="keyword">enum</span> &#123; age_bits                 = <span class="number">4</span>,</span><br><span class="line">         lock_bits                = <span class="number">2</span>,</span><br><span class="line">         biased_lock_bits         = <span class="number">1</span>,</span><br><span class="line">         max_hash_bits            = BitsPerWord - age_bits - lock_bits - biased_lock_bits,</span><br><span class="line">         hash_bits                = max_hash_bits &gt; <span class="number">31</span> ? <span class="number">31</span> : max_hash_bits,</span><br><span class="line">         cms_bits                 = LP64_ONLY(<span class="number">1</span>) NOT_LP64(<span class="number">0</span>),</span><br><span class="line">         epoch_bits               = <span class="number">2</span></span><br><span class="line">  &#125;;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// The biased locking code currently requires that the age bits be</span></span><br><span class="line">  <span class="comment">// contiguous to the lock bits.</span></span><br><span class="line">  <span class="keyword">enum</span> &#123; lock_shift               = <span class="number">0</span>,</span><br><span class="line">         biased_lock_shift        = lock_bits,</span><br><span class="line">         age_shift                = lock_bits + biased_lock_bits,</span><br><span class="line">         cms_shift                = age_shift + age_bits,</span><br><span class="line">         hash_shift               = cms_shift + cms_bits,</span><br><span class="line">         epoch_shift              = hash_shift</span><br><span class="line">  &#125;;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>对于上述源码，mark word中字段枚举意义解释如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">hash： 保存对象的哈希码</span><br><span class="line">age： 保存对象的分代年龄</span><br><span class="line">biased_lock： 偏向锁标识位</span><br><span class="line">lock： 锁状态标识位</span><br><span class="line">JavaThread*： 保存持有偏向锁的线程ID</span><br><span class="line">epoch： 保存偏向时间戳</span><br></pre></td></tr></table></figure><p>锁标记枚举的意义解释如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">locked_value             &#x3D; 0, &#x2F;&#x2F;00 轻量级锁</span><br><span class="line">unlocked_value           &#x3D; 1, &#x2F;&#x2F;01 无锁</span><br><span class="line">monitor_value            &#x3D; 2, &#x2F;&#x2F;10 监视器锁，也叫膨胀锁，也叫重量级锁</span><br><span class="line">marked_value             &#x3D; 3, &#x2F;&#x2F;11 GC标记</span><br><span class="line">biased_lock_pattern      &#x3D; 5  &#x2F;&#x2F;101 偏向锁</span><br></pre></td></tr></table></figure><p>上述协议字段正对应着源码中所列的枚举字段，这里简要进行说明一下。</p><p><code>hash</code> :   对象的hash码，hash代表的并不一定是对象的（虚拟）内存地址，但依赖于内存地址，具体取决于运行时库和JVM的具体实现，底层由C++实现，实现细节参考OpenJDK源码。但可以简单的理解为对象的内存地址的整型值。</p><p><code>age</code>:   对象分代GC的年龄。分代GC的年龄是指Java对象在分代垃圾回收模型下(现在JVM实现基本都使用的这种模型)，对象上标记的分代年龄，当该年轻代内存区域空间满后，或者到达GC最达年龄时，会被扔进老年代等待老年代区域满后被<code>FullGC</code>收集掉，这里的最大年龄是通过JVM参数设定的：<code>-XX:MaxTenuringThreshold</code>，默认值是15。</p><h4 id="Class-Pointer"><a href="#Class-Pointer" class="headerlink" title="Class Pointer"></a>Class Pointer</h4><p>这一部分用于存储对象的类型指针，该指针指向它的类元数据，JVM通过这个指针确定对象是哪个类的实例。该指针的位长度为JVM的一个字大小，即32位的JVM为32位，64位的JVM为64位。</p><p>如果应用的对象过多，使用64位的指针将浪费大量内存，统计而言，64位的JVM将会比32位的JVM多耗费50%的内存。为了节约内存可以使用选项<code>+UseCompressedOops</code>开启指针压缩，其中，<code>oop</code>即<code>ordinary object pointer</code>普通对象指针。开启该选项后，下列指针将压缩至32位：</p><ol><li>每个Class的属性指针（即静态变量）</li><li>每个对象的属性指针（即对象变量）</li><li>普通对象数组的每个元素指针</li></ol><p>当然，也不是所有的指针都会压缩，一些特殊类型的指针JVM不会优化，比如指向<code>PermGen</code>的Class对象指针(JDK8中指向元空间的Class对象指针)、本地变量、堆栈元素、入参、返回值和NULL指针等。</p><h4 id="数组长度"><a href="#数组长度" class="headerlink" title="数组长度"></a>数组长度</h4><p>如果对象是一个数组，那么对象头还需要有额外的空间用于存储数组的长度，这部分数据的长度也随着JVM架构的不同而不同：32位的JVM上，长度为32位；64位JVM则为64位。64位JVM如果开启<code>+UseCompressedOops</code>选项，该区域长度也将由64位压缩至32位。</p><p>根据以上描述，总结如下：</p><table><thead><tr><th>类型</th><th>32位JVM</th><th>64位JVM</th></tr></thead><tbody><tr><td>markword</td><td>32bit</td><td>64bit</td></tr><tr><td>类型指针</td><td>32bit</td><td>64bit ，开启指针压缩时为32bit</td></tr><tr><td>数组长度</td><td>32bit</td><td>64bit ，开启指针压缩时为32bit</td></tr></tbody></table><h3 id="实例数据"><a href="#实例数据" class="headerlink" title="实例数据"></a>实例数据</h3><p>这部分数据才是真正具有业务意义的数据，实例数据instance Data是占用堆内存的主要部分，它们都是对象的实例字段。那么计算这些字段的大小，主要思路就是根据这些字段的类型大小进行求和的。在<code>JVM</code>中，对象的字段是由基本数据类型和引用类型组成的。其所占用空间的大小如下所示：</p><table><thead><tr><th>类型</th><th>大小（字节）</th></tr></thead><tbody><tr><td>byte / boolean</td><td>1</td></tr><tr><td>int / float</td><td>4</td></tr><tr><td>char / short</td><td>2</td></tr><tr><td>double / long</td><td>8</td></tr><tr><td>ref(引用类型)</td><td>4(32bitJVM)   OR   8(64bitJVM)  OR  4( 64bit &amp;&amp; <code>-XX:UseCompressedOops</code>)</td></tr></tbody></table><blockquote><p>说明：其中ref表示引用类型，引用类型实际上是一个地址指针，32bit机器上，占用4字节，64bit机器上，在jdk1.6之后，如果开启了指针压缩(默认开启: <code>-XX:UseCompressedOops</code>，仅支持64位机器)，则占用4字节。Java对象的所有字段类型都可映射为上述类型之一，因此实例数据部分的大小，实际上就是这些字段类型的大小之和。当然，实际情况可能比这个稍微复杂一点，如字段排序、内部padding以及父类字段大小的计算等。</p></blockquote><p>字段类型的标准大小，如上表描述，除了引用类型会受CPU架构及是否开启指针压缩影响外，其它都是固定的。因此计算起来比较简单。但实际情其实并不这么简单，例如如下对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span></span>&#123;</span><br><span class="line">   <span class="keyword">int</span> age = <span class="number">20</span>;</span><br><span class="line">   String name = <span class="string">"Xiaoming"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">extends</span> <span class="title">People</span></span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> married = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">long</span> birthday = <span class="number">128902093242L</span>;</span><br><span class="line">    <span class="keyword">char</span> tag = <span class="string">'c'</span>;</span><br><span class="line">    <span class="keyword">double</span> sallary = <span class="number">1200.00</span>d;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Person对象实例数据的大小应该是多少呢？这里假设使用64位机器，采用指针压缩，则对象头的大小为：8(<code>_mark</code>)+4(<code>_klass</code>) = 12</p><p>然后实例数据的大小为： 4(<code>age</code>)+4(<code>name</code>) + 8(<code>birthday</code>) + 8(<code>sallary</code>) + 2(<code>tag</code>) + 1(<code>married</code>) = 27<br>因此最终的对象本身大小为：12+27+1(padding) = 40字节<br>注意，为了尽量减少内存空间的占用，这里在计算的过程中需要遵循以下几个规则：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"></span><br><span class="line">* 1: 除了对象整体需要按8字节对齐外，每个成员变量都尽量使本身的大小在内存中尽量对齐。比如 int 按 4 位对齐，long 按 8 位对齐。</span><br><span class="line"></span><br><span class="line">* 2：类属性按照如下优先级进行排列：长整型和双精度类型；整型和浮点型；字符和短整型；字节类型和布尔类型，最后是引用类型。这些属性都按照各自的单位对齐。</span><br><span class="line"></span><br><span class="line">* 3：优先按照规则一和二处理父类中的成员，接着才是子类的成员。</span><br><span class="line"></span><br><span class="line">* 4：当父类中最后一个成员和子类第一个成员的间隔如果不够4个字节的话，就必须扩展到4个字节的基本单位。</span><br><span class="line"></span><br><span class="line">* 5：如果子类第一个成员是一个双精度或者长整型，并且父类并没有用完8个字节，JVM会破坏规则2，按照整形（int），短整型（short），字节型（byte），引用类型（reference）的顺序，向未填满的空间填充。</span><br><span class="line"></span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><p> 最后计算引用类型字段的实际大小：<code>&quot;Xiaoming&quot;</code>，按字符串对象的字段进行计算，对象头12字节，hash字段4字节，char[] 4字节，共12+4+4+4(padding) = 24字节，其中char[]又是引用类型，且是数组类型，其大小为：对象头12+4(<code>length</code>) + 9(<code>arrLength</code>) * 2(<code>char</code>) +4(<code>padding</code>) = 40字节。</p><p><strong>所以综上所述，一个Person对象占用内存的大小为104字节。</strong></p><p>关于指针压缩</p><blockquote><p>一个比较明显的问题是，在64位机器上，如果开启了指针压缩后，则引用只占用4个字节，4字节的最大寻址空间为2^32=4GB, 那么如何保证能满足寻址空间大于4G的需求呢？</p><p>开启指针压缩后，实际上会压缩的对象包括：每个Class的属性指针(静态成员变量)及每个引用类型的字段(包括数组)指针，而本地变量，堆栈元素，入参，返回值，NULL这些指针不会被压缩。在开启指针压缩后，如前文源码所述，<code>markWord</code>中的存储指针将是<code>_compressed_klass</code>，对应的类型是<code>narrowOop</code>，不再是<code>wideKlassOop</code>了，有什么区别呢？</p><p><code>wideKlassOop</code>和<code>narrowOop</code>都指向<code>InstanceKlass</code>对象，其中<code>narrowOop</code>指向的是经过压缩的对象。简单来说，<code>wideKlassOop</code>可以达到整个寻址空间。而<code>narrowOop</code>虽然达不到整个寻址空间，但它面对也不再是个单纯的<code>byte</code>地址，而是一个<code>object</code>，也就是说使用<code>narrowOop</code>后，压缩后的这4个字节表示的4GB实际上是4G个对象的指针，大概是32GB。JVM会对对应的指针对象进行解码, JDK源码中，oop.hpp源码文件中定义了抽象的编解码方法，用于将<code>narrowOop</code>解码为一个正常的引用指针，或将一下正常的引用指针编码为<code>narrowOop</code>：</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Decode an oop pointer from a narrowOop if compressed.</span></span><br><span class="line"><span class="comment">// These are overloaded for oop and narrowOop as are the other functions</span></span><br><span class="line"><span class="comment">// below so that they can be called in template functions.</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> oop <span class="title">decode_heap_oop_not_null</span><span class="params">(oop v)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> oop <span class="title">decode_heap_oop_not_null</span><span class="params">(narrowOop v)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> oop <span class="title">decode_heap_oop</span><span class="params">(oop v)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> oop <span class="title">decode_heap_oop</span><span class="params">(narrowOop v)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Encode an oop pointer to a narrow oop.  The or_null versions accept</span></span><br><span class="line"><span class="comment">// null oop pointer, others do not in order to eliminate the</span></span><br><span class="line"><span class="comment">// null checking branches.</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> narrowOop <span class="title">encode_heap_oop_not_null</span><span class="params">(oop v)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> narrowOop <span class="title">encode_heap_oop</span><span class="params">(oop v)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="对齐填充"><a href="#对齐填充" class="headerlink" title="对齐填充"></a>对齐填充</h3><p>对齐填充是底层CPU数据总线读取内存数据时的要求，例如，通常CPU按照字单位读取，如果一个完整的数据体不需要对齐，那么在内存中存储时，其地址有极大可能横跨两个字，例如某数据块地址未对齐，存储为1-4，而<code>cpu</code>按字读取，需要把0-3字块读取出来，再把4-7字块读出来，最后合并舍弃掉多余的部分。这种操作会很多很多，且很频繁，但如果进行了对齐，则一次性即可取出目标数据，将会大大节省<code>cpu</code>资源。</p><p>在<code>hotSpot</code>虚拟机中，默认的对齐位数是8，与<code>cpu</code>架构无关，如下代码中的<code>objectAlignment</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Try to get the object alignment (the default seems to be 8 on Hotspot, </span></span><br><span class="line"><span class="comment">// regardless of the architecture).</span></span><br><span class="line"><span class="keyword">int</span> objectAlignment = <span class="number">8</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">final</span> Class&lt;?&gt; beanClazz = Class.forName(<span class="string">"com.sun.management.HotSpotDiagnosticMXBean"</span>);</span><br><span class="line">  <span class="keyword">final</span> Object hotSpotBean = ManagementFactory.newPlatformMXBeanProxy(</span><br><span class="line">    ManagementFactory.getPlatformMBeanServer(),</span><br><span class="line">    <span class="string">"com.sun.management:type=HotSpotDiagnostic"</span>,</span><br><span class="line">    beanClazz</span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">final</span> Method getVMOptionMethod = beanClazz.getMethod(<span class="string">"getVMOption"</span>, String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  <span class="keyword">final</span> Object vmOption = getVMOptionMethod.invoke(hotSpotBean, <span class="string">"ObjectAlignmentInBytes"</span>);</span><br><span class="line">  objectAlignment = Integer.parseInt(</span><br><span class="line">      vmOption.getClass().getMethod(<span class="string">"getValue"</span>).invoke(vmOption).toString()</span><br><span class="line">  );</span><br><span class="line">  supportedFeatures.add(JvmFeature.OBJECT_ALIGNMENT);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">  <span class="comment">// Ignore.</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">NUM_BYTES_OBJECT_ALIGNMENT = objectAlignment;</span><br></pre></td></tr></table></figure><p>可以看出，通过<code>HotSpotDiagnosticMXBean.getVMOption(&quot;ObjectAlignmentBytes&quot;).getValue()</code>方法可以拿到当前JVM环境下的对齐位数。</p><p>注意，这里的<code>HotSpotDiagnosticMXBean</code>是JVM提供的JMX中一种可被管理的资源，即<code>HotSpot</code>信息资源。</p><hr><h2 id="对象的大小的计算"><a href="#对象的大小的计算" class="headerlink" title="对象的大小的计算"></a>对象的大小的计算</h2><p>关于对象占用内存的大小计算，目前网上也有几种方法，整理如下：</p><h3 id="Instrumentation"><a href="#Instrumentation" class="headerlink" title="Instrumentation"></a>Instrumentation</h3><p>使用<code>java.lang.instrument.Instrumentation.getObjectSize()</code>方法，可以很方便的计算任何一个运行时对象的大小，返回该对象本身及其间接引用的对象在内存中的大小。不过，这个类的唯一实现类<code>InstrumentationImpl</code>的构造方法是私有的，在创建时，需要依赖一个<code>nativeAgent</code>，和运行环境所支持的一些预定义类信息，我们在代码中无法直接实例化它，需要在JVM启动时，通过指定代理的方式，让JVM来实例化它。</p><p>具体来讲，就是需要声明一个<code>premain</code>方法，它和main方法的方法签名有点相似，只不过方法名叫<code>“premain”</code>，同时方法参数也不一样，它接收一个<code>String</code>类型和<code>instrumentation</code>参数，而<code>String</code>参数实际上和<code>String[]</code>是一样的，只不过用<code>String</code>统一来表达的。在<code>premain</code>函数中，将<code>instrumentation</code>参数赋给一个静态变量，其它地方就可以使用了。如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SizeTool</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Instrumentation instrumentation;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">premain</span><span class="params">(String args, Instrumentation inst)</span> </span>&#123;</span><br><span class="line">    instrumentation = inst;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">getObjectSize</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> instrumentation.getObjectSize(o);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  从方法名可以猜到，这里的<code>premain</code>是要先于<code>main</code>执行的，而先于<code>main</code>执行，这个动作只能由<code>JVM</code>来完成了。即在<code>JVM</code>启动时，先启动一个<code>agent</code>，操作如下：</p><p>  假设<code>main</code>方法所在的jar包为：<code>A.jar</code>，<code>premain</code>方法所在的jar包为<code>B.jar</code>。注意为<code>main</code>所在的代码打包时，和其它工具类打包一样，需要声明一个<code>MANIFEST.MF</code>清单文件，如下所求：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Manifest-Version: 1.0</span><br><span class="line">Main-Class: yp.tools.Main</span><br><span class="line">Premain-Class: yp.tools.SizeTool</span><br></pre></td></tr></table></figure><p>然后执行java命令执行jar文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -javaagent:B.jar -jar A.jar</span><br></pre></td></tr></table></figure><p>点评：这种方法的优点是编码简单，缺点就是必须启动一个<code>javaagent</code>，因此要求修改Java的启动参数。</p><h3 id="使用Unsafe"><a href="#使用Unsafe" class="headerlink" title="使用Unsafe"></a>使用Unsafe</h3><p><code>java</code>中的<code>sun.misc.Unsafe</code>类，有一个<code>objectFieldOffset(Field f)</code>方法，表示获取指定字段在所在实例中的起始地址偏移量，如此可以计算出指定的对象中每个字段的偏移量，值为最大的那个就是最后一个字段的首地址，加上该字段的实际大小，就能知道该对象整体的大小。如现有一Person类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">boolean</span> married;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>假设该类的一个实例<code>p</code>，通过<code>Unsafe.objectFieldOffset()</code>方法计算到得<code>age/birthday/married</code>三个字段的偏移量分别是16，21,  17，则表明p1对象中的最后一个字段是name，它的首地址是21，由于它是一个引用，所以它的大小默认为4(开启指针压缩)，则该对象本身的大小就是21+4+ 7= 32字节。其中7表示padding，即为了使结果变成8的整数倍而做的padding </p><p>但上述计算，只是计算了对象本身的大小，并没有计算其所引用的引用类型的最终大小，这就需要手工写代码进行递归计算了。</p><p>点评：使用<code>Unsafe</code>可以完全不care对象内的复杂构成，可以很精确的计算出对象头的大小(即第一个字段的偏移)及每个字段的偏移。缺点是<code>Unsafe</code>通常禁止开发者直接使用，需要通过反射获取其实例，另外，最后一个字段的大小需要手工计算。其次需要手工写代码递归计算才能得到对象及其所引用的对象的综合大小，相对比较麻烦。</p><h3 id="使用第三方工具"><a href="#使用第三方工具" class="headerlink" title="使用第三方工具"></a>使用第三方工具</h3><p> 这里要介绍的是lucene提供的专门用于计算堆内存占用大小的工具类：RamUsageEstimator，maven坐标：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.apache.lucene&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;lucene-core&lt;&#x2F;artifactId&gt;</span><br><span class="line">      &lt;version&gt;4.0.0&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><p><code>RamUsageEstimator</code>就是根据java对象在堆内存中的存储格式，通过计算Java对象头、实例数据、引用等的大小，相加而得，如果有引用，还能递归计算引用对象的大小。<code>RamUsageEstimator</code>的源码并不多，几百行，清晰可读。这里不进行一一解读了。它在初始化的时候会根据当前JVM运行环境、CPU架构、运行参数、是否开启指针压缩、JDK版本等综合计算对象头的大小，而实例数据部分则按照java基础数据类型的标准大小进行计算。思路简单，同时也在一定程度上反映出了Java对象格式的奥秘！</p><p>常用方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//计算指定对象及其引用树上的所有对象的综合大小，单位字节</span></span><br><span class="line"><span class="keyword">long</span> RamUsageEstimator.sizeOf(Object obj)</span><br><span class="line"></span><br><span class="line"><span class="comment">//计算指定对象本身在堆空间的大小，单位字节</span></span><br><span class="line"><span class="keyword">long</span> RamUsageEstimator.shallowSizeOf(Object obj)</span><br><span class="line"></span><br><span class="line"><span class="comment">//计算指定对象及其引用树上的所有对象的综合大小，返回可读的结果，如：2KB</span></span><br><span class="line">String RamUsageEstimator.humanSizeOf(Object obj)</span><br></pre></td></tr></table></figure><p>点评：使用该第三方工具比较简单直接，主要依靠JVM本身环境、参数及CPU架构计算头信息，再依据数据类型的标准计算实例字段大小，计算速度很快，另外使用较方便。如果非要说这种方式有什么缺点的话，那就是这种方式计算所得的对象头大小是基于JVM声明规范的，并不是通过运行时内存地址计算而得，存在与实际大小不符的这种可能性。</p>  <a id="more"></a><p><img alt="to be continued.png" data-src="https://i.loli.net/2019/12/19/GI4VxycizW9pH7B.png" class="lazyload"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Object </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一篇博客</title>
      <link href="/2019/12/18/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
      <url>/2019/12/18/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>今天是公元 <code>2019-12-18</code>日，星期三，天气晴。使用<code>hexo</code> + <code>github</code>重新搭建了一个静态博客系统，之前也有搭建过，由于图床的原因，之前写的博客有很多图片都看不到了，恰好也想重新换一个主题，就再重新整理一下了。搭建这个博客的目的是为了督促自己的学习，多写技术博客，同时也会在博客上记录一些生活上和工作上的事情。</p>]]></content>
      
      
      <categories>
          
          <category> Demo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Demo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
